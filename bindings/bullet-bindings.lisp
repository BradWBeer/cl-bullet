;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.4
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package #:cl-bullet-bindings)

;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcstruct Element
	(m_tag :pointer))

(cffi:defcstruct fCollision)

(cffi:defcstruct Material
	(m_kLST :float)
	(m_kAST :float)
	(m_kVST :float)
	(m_flags :int))

(cffi:defcstruct Feature
	(m_material :pointer))

(cffi:defcstruct Config
	(kVCF :float)
	(kDP :float)
	(kDG :float)
	(kLF :float)
	(kPR :float)
	(kVC :float)
	(kDF :float)
	(kMT :float)
	(kCHR :float)
	(kKHR :float)
	(kSHR :float)
	(kAHR :float)
	(kSRHR_CL :float)
	(kSKHR_CL :float)
	(kSSHR_CL :float)
	(kSR_SPLT_CL :float)
	(kSK_SPLT_CL :float)
	(kSS_SPLT_CL :float)
	(maxvolume :float)
	(timescale :float)
	(viterations :int)
	(piterations :int)
	(diterations :int)
	(citerations :int)
	(collisions :int))

(cffi:defcstruct Node
	(m_x :pointer)
	(m_q :pointer)
	(m_v :pointer)
	(m_f :pointer)
	(m_n :pointer)
	(m_im :float)
	(m_area :float)
	(m_leaf :pointer)
	(m_battach :int))

(cl:defconstant BT_BULLET_VERSION 282)

(cffi:defcfun ("_wrap_btGetVersion" btGetVersion) :int)

(cl:defconstant BT_LARGE_FLOAT 1d18)

(cffi:defcvar ("btInfinityMask" btInfinityMask)
 :int)

(cffi:defcfun ("_wrap_btSqrt" btSqrt) :float
  (y :float))

(cffi:defcfun ("_wrap_btFabs" btFabs) :float
  (x :float))

(cffi:defcfun ("_wrap_btCos" btCos) :float
  (x :float))

(cffi:defcfun ("_wrap_btSin" btSin) :float
  (x :float))

(cffi:defcfun ("_wrap_btTan" btTan) :float
  (x :float))

(cffi:defcfun ("_wrap_btAcos" btAcos) :float
  (x :float))

(cffi:defcfun ("_wrap_btAsin" btAsin) :float
  (x :float))

(cffi:defcfun ("_wrap_btAtan" btAtan) :float
  (x :float))

(cffi:defcfun ("_wrap_btAtan2" btAtan2) :float
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_btExp" btExp) :float
  (x :float))

(cffi:defcfun ("_wrap_btLog" btLog) :float
  (x :float))

(cffi:defcfun ("_wrap_btPow" btPow) :float
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_btFmod" btFmod) :float
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_btAtan2Fast" btAtan2Fast) :float
  (y :float)
  (x :float))

(cffi:defcfun ("_wrap_btFuzzyZero" btFuzzyZero) :pointer
  (x :float))

(cffi:defcfun ("_wrap_btEqual" btEqual) :pointer
  (a :float)
  (eps :float))

(cffi:defcfun ("_wrap_btGreaterEqual" btGreaterEqual) :pointer
  (a :float)
  (eps :float))

(cffi:defcfun ("_wrap_btIsNegative" btIsNegative) :int
  (x :float))

(cffi:defcfun ("_wrap_btRadians" btRadians) :float
  (x :float))

(cffi:defcfun ("_wrap_btDegrees" btDegrees) :float
  (x :float))

(cffi:defcfun ("_wrap_btFsel" btFsel) :float
  (a :float)
  (b :float)
  (c :float))

(cffi:defcfun ("_wrap_btMachineIsLittleEndian" btMachineIsLittleEndian) :pointer)

(cffi:defcfun ("_wrap_unsigned_btSelect" unsigned_btSelect) :unsigned-int
  (condition :unsigned-int)
  (valueIfConditionNonZero :unsigned-int)
  (valueIfConditionZero :unsigned-int))

(cffi:defcfun ("_wrap_int_btSelect" int_btSelect) :int
  (condition :unsigned-int)
  (valueIfConditionNonZero :int)
  (valueIfConditionZero :int))

(cffi:defcfun ("_wrap_float_btSelect" float_btSelect) :float
  (condition :unsigned-int)
  (valueIfConditionNonZero :float)
  (valueIfConditionZero :float))

(cffi:defcfun ("_wrap_unsigned_btSwapEndian_to_unsigned" unsigned_btSwapEndian_to_unsigned) :unsigned-int
  (val :unsigned-int))

(cffi:defcfun ("_wrap_unsigned_short_btSwapEndian_to_unsigned_short" unsigned_short_btSwapEndian_to_unsigned_short) :unsigned-short
  (val :unsigned-short))

(cffi:defcfun ("_wrap_int_btSwapEndian_to_unsigned" int_btSwapEndian_to_unsigned) :unsigned-int
  (val :int))

(cffi:defcfun ("_wrap_short_btSwapEndian_to_unsigned_short" short_btSwapEndian_to_unsigned_short) :unsigned-short
  (val :short))

(cffi:defcfun ("_wrap_btSwapEndianFloat" btSwapEndianFloat) :unsigned-int
  (d :float))

(cffi:defcfun ("_wrap_btUnswapEndianFloat" btUnswapEndianFloat) :float
  (a :unsigned-int))

(cffi:defcfun ("_wrap_btSwapEndianDouble" btSwapEndianDouble) :void
  (d :double)
  (dst :pointer))

(cffi:defcfun ("_wrap_btUnswapEndianDouble" btUnswapEndianDouble) :double
  (src :pointer))

(cffi:defcfun ("_wrap_btLargeDot" btLargeDot) :float
  (a :pointer)
  (b :pointer)
  (n :int))

(cffi:defcfun ("_wrap_btNormalizeAngle" btNormalizeAngle) :float
  (angleInRadians :float))

(cffi:defcfun ("_wrap_new_btTypedObject" new_btTypedObject) :pointer
  (objectType :int))

(cffi:defcfun ("_wrap_btTypedObject_m_objectType_set" btTypedObject_m_objectType_set) :void
  (self :pointer)
  (m_objectType :int))

(cffi:defcfun ("_wrap_btTypedObject_m_objectType_get" btTypedObject_m_objectType_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedObject_getObjectType" btTypedObject_getObjectType) :int
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btTypedObject" delete_btTypedObject) :void
  (self :pointer))

(cl:defconstant btVector3DataName "btVector3FloatData")

(cffi:defcfun ("_wrap_btVector3_m_floats_set" btVector3_m_floats_set) :void
  (self :pointer)
  (m_floats :pointer))

(cffi:defcfun ("_wrap_btVector3_m_floats_get" btVector3_m_floats_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btVector3_default" new_btVector3_default) :pointer)

(cffi:defcfun ("_wrap_new_btVector3" new_btVector3) :pointer
  (_x :pointer)
  (_y :pointer)
  (_z :pointer))

(cffi:defcfun ("_wrap_btVector3___add_assign__" btVector3___add_assign__) :pointer
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3___sub_assign__" btVector3___sub_assign__) :pointer
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3___mul_assign__" btVector3___mul_assign__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btVector3___div_assign__" btVector3___div_assign__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btVector3_dot" btVector3_dot) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_length2" btVector3_length2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_btlength" btVector3_btlength) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_norm" btVector3_norm) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_distance2" btVector3_distance2) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_distance" btVector3_distance) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_safeNormalize" btVector3_safeNormalize) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_normalize" btVector3_normalize) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_normalized" btVector3_normalized) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_rotate" btVector3_rotate) :pointer
  (self :pointer)
  (wAxis :pointer)
  (angle :float))

(cffi:defcfun ("_wrap_btVector3_angle" btVector3_angle) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_absolute" btVector3_absolute) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_cross" btVector3_cross) :pointer
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_triple" btVector3_triple) :float
  (self :pointer)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btVector3_minAxis" btVector3_minAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_maxAxis" btVector3_maxAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_furthestAxis" btVector3_furthestAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_closestAxis" btVector3_closestAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_setInterpolate3" btVector3_setInterpolate3) :void
  (self :pointer)
  (v0 :pointer)
  (v1 :pointer)
  (rt :float))

(cffi:defcfun ("_wrap_btVector3_lerp" btVector3_lerp) :pointer
  (self :pointer)
  (v :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_btVector3_mult_equal_btVector3_btVector3" btVector3_mult_equal_btVector3_btVector3) :pointer
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btVector3_getX" btVector3_getX) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_getY" btVector3_getY) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_getZ" btVector3_getZ) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_setX" btVector3_setX) :void
  (self :pointer)
  (_x :float))

(cffi:defcfun ("_wrap_btVector3_setY" btVector3_setY) :void
  (self :pointer)
  (_y :float))

(cffi:defcfun ("_wrap_btVector3_setZ" btVector3_setZ) :void
  (self :pointer)
  (_z :float))

(cffi:defcfun ("_wrap_btVector3_setW" btVector3_setW) :void
  (self :pointer)
  (_w :float))

(cffi:defcfun ("_wrap_btVector3_x" btVector3_x) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_y" btVector3_y) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_z" btVector3_z) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_w" btVector3_w) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3___eq__" btVector3___eq__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btVector3___ne__" btVector3___ne__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btVector3_setMax" btVector3_setMax) :void
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btVector3_setMin" btVector3_setMin) :void
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btVector3_setValue" btVector3_setValue) :void
  (self :pointer)
  (_x :pointer)
  (_y :pointer)
  (_z :pointer))

(cffi:defcfun ("_wrap_btVector3_getSkewSymmetricMatrix" btVector3_getSkewSymmetricMatrix) :void
  (self :pointer)
  (v0 :pointer)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btVector3_setZero" btVector3_setZero) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_isZero" btVector3_isZero) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_fuzzyZero" btVector3_fuzzyZero) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector3_serialize" btVector3_serialize) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btVector3_deSerialize" btVector3_deSerialize) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btVector3_serializeFloat" btVector3_serializeFloat) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btVector3_deSerializeFloat" btVector3_deSerializeFloat) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btVector3_serializeDouble" btVector3_serializeDouble) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btVector3_deSerializeDouble" btVector3_deSerializeDouble) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btVector3_maxDot" btVector3_maxDot) :long
  (self :pointer)
  (array :pointer)
  (array_count :long)
  (dotOut :pointer))

(cffi:defcfun ("_wrap_btVector3_minDot" btVector3_minDot) :long
  (self :pointer)
  (array :pointer)
  (array_count :long)
  (dotOut :pointer))

(cffi:defcfun ("_wrap_btVector3_dot3" btVector3_dot3) :pointer
  (self :pointer)
  (v0 :pointer)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_delete_btVector3" delete_btVector3) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDot_btVector3" btDot_btVector3) :float
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btDistance2" btDistance2) :float
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btDistance" btDistance) :float
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btAngle_from_btVector3s" btAngle_from_btVector3s) :float
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btCross" btCross) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("_wrap_btTriple" btTriple) :float
  (v1 :pointer)
  (v2 :pointer)
  (v3 :pointer))

(cffi:defcfun ("_wrap_lerp" lerp) :pointer
  (v1 :pointer)
  (v2 :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_new_btVector4_default" new_btVector4_default) :pointer)

(cffi:defcfun ("_wrap_new_btVector4" new_btVector4) :pointer
  (_x :pointer)
  (_y :pointer)
  (_z :pointer)
  (_w :pointer))

(cffi:defcfun ("_wrap_btVector4_absolute4" btVector4_absolute4) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_getW" btVector4_getW) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_maxAxis4" btVector4_maxAxis4) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_minAxis4" btVector4_minAxis4) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_closestAxis4" btVector4_closestAxis4) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btVector4_setValue" btVector4_setValue) :void
  (self :pointer)
  (_x :pointer)
  (_y :pointer)
  (_z :pointer)
  (_w :pointer))

(cffi:defcfun ("_wrap_delete_btVector4" delete_btVector4) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSwapScalarEndian" btSwapScalarEndian) :void
  (sourceVal :pointer)
  (destVal :pointer))

(cffi:defcfun ("_wrap_btSwapVector3Endian" btSwapVector3Endian) :void
  (sourceVec :pointer)
  (destVec :pointer))

(cffi:defcfun ("_wrap_btUnSwapVector3Endian" btUnSwapVector3Endian) :void
  (vector :pointer))

(cffi:defcstruct btVector3FloatData
	(m_floats :pointer))

(cffi:defcstruct btVector3DoubleData
	(m_floats :pointer))

(cffi:defcfun ("_wrap_btQuadWord_getX" btQuadWord_getX) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_getY" btQuadWord_getY) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_getZ" btQuadWord_getZ) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setX" btQuadWord_setX) :void
  (self :pointer)
  (_x :float))

(cffi:defcfun ("_wrap_btQuadWord_setY" btQuadWord_setY) :void
  (self :pointer)
  (_y :float))

(cffi:defcfun ("_wrap_btQuadWord_setZ" btQuadWord_setZ) :void
  (self :pointer)
  (_z :float))

(cffi:defcfun ("_wrap_btQuadWord_setW" btQuadWord_setW) :void
  (self :pointer)
  (_w :float))

(cffi:defcfun ("_wrap_btQuadWord_x" btQuadWord_x) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_y" btQuadWord_y) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_z" btQuadWord_z) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord_w" btQuadWord_w) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuadWord___eq__" btQuadWord___eq__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btQuadWord___ne__" btQuadWord___ne__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setValue__SWIG_0" btQuadWord_setValue) :void
  (self :pointer)
  (_x :pointer)
  (_y :pointer)
  (_z :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setValue__SWIG_1" btQuadWord_setValue) :void
  (self :pointer)
  (_x :pointer)
  (_y :pointer)
  (_z :pointer)
  (_w :pointer))

(cffi:defcfun ("_wrap_new_btQuadWord_default" new_btQuadWord_default) :pointer)

(cffi:defcfun ("_wrap_new_btQuadWord__SWIG_0" new_btQuadWord) :pointer
  (_x :pointer)
  (_y :pointer)
  (_z :pointer))

(cffi:defcfun ("_wrap_new_btQuadWord__SWIG_1" new_btQuadWord) :pointer
  (_x :pointer)
  (_y :pointer)
  (_z :pointer)
  (_w :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setMax" btQuadWord_setMax) :void
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btQuadWord_setMin" btQuadWord_setMin) :void
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_delete_btQuadWord" delete_btQuadWord) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btQuaternion_default" new_btQuaternion_default) :pointer)

(cffi:defcfun ("_wrap_new_btQuaternion_from_4btScalars" new_btQuaternion_from_4btScalars) :pointer
  (_x :pointer)
  (_y :pointer)
  (_z :pointer)
  (_w :pointer))

(cffi:defcfun ("_wrap_new_btQuaternion_from_btVector_and_btScalar" new_btQuaternion_from_btVector_and_btScalar) :pointer
  (_axis :pointer)
  (_angle :pointer))

(cffi:defcfun ("_wrap_new_btQuaternion_from_yaw_pitch_and_roll" new_btQuaternion_from_yaw_pitch_and_roll) :pointer
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btQuaternion_setRotation" btQuaternion_setRotation) :void
  (self :pointer)
  (axis :pointer)
  (_angle :pointer))

(cffi:defcfun ("_wrap_btQuaternion_setEuler" btQuaternion_setEuler) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btQuaternion_setEulerZYX" btQuaternion_setEulerZYX) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btQuaternion___add_assign__" btQuaternion___add_assign__) :pointer
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion___sub_assign__" btQuaternion___sub_assign__) :pointer
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion___mul_assign__" btQuaternion___mul_assign__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btQuaternion_mult_equal_btQuaternion_btQuaternion" btQuaternion_mult_equal_btQuaternion_btQuaternion) :pointer
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion_dot" btQuaternion_dot) :float
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion_length2" btQuaternion_length2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_btlength" btQuaternion_btlength) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_normalize" btQuaternion_normalize) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion___mul__" btQuaternion___mul__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btQuaternion___div__" btQuaternion___div__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btQuaternion___div_assign__" btQuaternion___div_assign__) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btQuaternion_normalized" btQuaternion_normalized) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_angle" btQuaternion_angle) :float
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion_angleShortestPath" btQuaternion_angleShortestPath) :float
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btQuaternion_getAngle" btQuaternion_getAngle) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_getAngleShortestPath" btQuaternion_getAngleShortestPath) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_getAxis" btQuaternion_getAxis) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_inverse" btQuaternion_inverse) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion___add__" btQuaternion___add__) :pointer
  (self :pointer)
  (q2 :pointer))

(cffi:defcfun ("_wrap_btQuaternion___sub__" btQuaternion___sub__) :pointer
  (self :pointer)
  (q2 :pointer))

(cffi:defcfun ("_wrap_btQuaternion___neg__" btQuaternion___neg__) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btQuaternion_farthest" btQuaternion_farthest) :pointer
  (self :pointer)
  (qd :pointer))

(cffi:defcfun ("_wrap_btQuaternion_nearest" btQuaternion_nearest) :pointer
  (self :pointer)
  (qd :pointer))

(cffi:defcfun ("_wrap_btQuaternion_slerp" btQuaternion_slerp) :pointer
  (self :pointer)
  (q :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_btQuaternion_getIdentity" btQuaternion_getIdentity) :pointer)

(cffi:defcfun ("_wrap_btQuaternion_getW" btQuaternion_getW) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btQuaternion" delete_btQuaternion) :void
  (self :pointer))

(cffi:defcfun ("_wrap_dot" dot) :float
  (q1 :pointer)
  (q2 :pointer))

(cffi:defcfun ("_wrap_btlength" btlength) :float
  (q :pointer))

(cffi:defcfun ("_wrap_btAngle_from_btQuaternions" btAngle_from_btQuaternions) :float
  (q1 :pointer)
  (q2 :pointer))

(cffi:defcfun ("_wrap_inverse" inverse) :pointer
  (q :pointer))

(cffi:defcfun ("_wrap_slerp" slerp) :pointer
  (q1 :pointer)
  (q2 :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_quatRotate" quatRotate) :pointer
  (rotation :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_shortestArcQuat" shortestArcQuat) :pointer
  (v0 :pointer)
  (v1 :pointer))

(cffi:defcfun ("_wrap_shortestArcQuatNormalize2" shortestArcQuatNormalize2) :pointer
  (v0 :pointer)
  (v1 :pointer))

(cffi:defcfun ("_wrap_new_btTransform_default" new_btTransform_default) :pointer)

(cffi:defcfun ("_wrap_new_btTransform_from_btQuaternion_and_btVector" new_btTransform_from_btQuaternion_and_btVector) :pointer
  (q :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_new_btTransform_from_btQuaternion" new_btTransform_from_btQuaternion) :pointer
  (q :pointer))

(cffi:defcfun ("_wrap_new_btTransform_from_btMatrix_and_btVector" new_btTransform_from_btMatrix_and_btVector) :pointer
  (b :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_new_btTransform_from_btMatrix" new_btTransform_from_btMatrix) :pointer
  (b :pointer))

(cffi:defcfun ("_wrap_new_btTransform_from_btTransform" new_btTransform_from_btTransform) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_btTransform___assign__" btTransform___assign__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btTransform_mult" btTransform_mult) :void
  (self :pointer)
  (t1 :pointer)
  (t2 :pointer))

(cffi:defcfun ("_wrap_btTransform_btTransform_funcall" btTransform_btTransform_funcall) :pointer
  (self :pointer)
  (x :pointer))

(cffi:defcfun ("_wrap_btTransform_mult_btTransform_btVector3" btTransform_mult_btTransform_btVector3) :pointer
  (self :pointer)
  (x :pointer))

(cffi:defcfun ("_wrap_btTransform_mult_btTransform_btQuaternion" btTransform_mult_btTransform_btQuaternion) :pointer
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btTransform_getBasis" btTransform_getBasis) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_const_getBasis" btTransform_const_getBasis) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_getOrigin" btTransform_getOrigin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_const_getOrigin" btTransform_const_getOrigin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_getRotation" btTransform_getRotation) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_setFromOpenGLMatrix" btTransform_setFromOpenGLMatrix) :void
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btTransform_getOpenGLMatrix" btTransform_getOpenGLMatrix) :void
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btTransform_setOrigin" btTransform_setOrigin) :void
  (self :pointer)
  (origin :pointer))

(cffi:defcfun ("_wrap_btTransform_invXform" btTransform_invXform) :pointer
  (self :pointer)
  (inVec :pointer))

(cffi:defcfun ("_wrap_btTransform_setBasis" btTransform_setBasis) :void
  (self :pointer)
  (basis :pointer))

(cffi:defcfun ("_wrap_btTransform_setRotation" btTransform_setRotation) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btTransform_setIdentity" btTransform_setIdentity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform___mul_assign__" btTransform___mul_assign__) :pointer
  (self :pointer)
  (t_arg1 :pointer))

(cffi:defcfun ("_wrap_btTransform_inverse" btTransform_inverse) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTransform_inverseTimes" btTransform_inverseTimes) :pointer
  (self :pointer)
  (t_arg1 :pointer))

(cffi:defcfun ("_wrap_btTransform_mult_btTransform_btTransform" btTransform_mult_btTransform_btTransform) :pointer
  (self :pointer)
  (t_arg1 :pointer))

(cffi:defcfun ("_wrap_btTransform_getIdentity" btTransform_getIdentity) :pointer)

(cffi:defcfun ("_wrap_btTransform_serialize" btTransform_serialize) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btTransform_serializeFloat" btTransform_serializeFloat) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btTransform_deSerialize" btTransform_deSerialize) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btTransform_deSerializeDouble" btTransform_deSerializeDouble) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btTransform_deSerializeFloat" btTransform_deSerializeFloat) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_delete_btTransform" delete_btTransform) :void
  (self :pointer))

(cffi:defcstruct btTransformFloatData
	(m_basis :pointer)
	(m_origin btVector3FloatData))

(cffi:defcstruct btTransformDoubleData
	(m_basis :pointer)
	(m_origin btVector3DoubleData))

(cffi:defcfun ("_wrap_new_btMatrix3x3_default" new_btMatrix3x3_default) :pointer)

(cffi:defcfun ("_wrap_new_btMatrix3x3_from_btQuaternion" new_btMatrix3x3_from_btQuaternion) :pointer
  (q :pointer))

(cffi:defcfun ("_wrap_new_btMatrix3x3" new_btMatrix3x3) :pointer
  (xx :pointer)
  (xy :pointer)
  (xz :pointer)
  (yx :pointer)
  (yy :pointer)
  (yz :pointer)
  (zx :pointer)
  (zy :pointer)
  (zz :pointer))

(cffi:defcfun ("_wrap_new_btMatrix3x3_from_btMatrix3x3" new_btMatrix3x3_from_btMatrix3x3) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3___assign__" btMatrix3x3___assign__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getColumn" btMatrix3x3_getColumn) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btMatrix3x3_getRow" btMatrix3x3_getRow) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btMatrix3x3___aref__" btMatrix3x3___aref__) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btMatrix3x3_btMatrix3x3_const" btMatrix3x3_btMatrix3x3_const) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btMatrix3x3_mult_equal_btMatrix3x3_btMatrix3x3" btMatrix3x3_mult_equal_btMatrix3x3_btMatrix3x3) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3___add_assign__" btMatrix3x3___add_assign__) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3___sub_assign__" btMatrix3x3___sub_assign__) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setFromOpenGLSubMatrix" btMatrix3x3_setFromOpenGLSubMatrix) :void
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setValue" btMatrix3x3_setValue) :void
  (self :pointer)
  (xx :pointer)
  (xy :pointer)
  (xz :pointer)
  (yx :pointer)
  (yy :pointer)
  (yz :pointer)
  (zx :pointer)
  (zy :pointer)
  (zz :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setRotation" btMatrix3x3_setRotation) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setEulerYPR" btMatrix3x3_setEulerYPR) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_setEulerZYX" btMatrix3x3_setEulerZYX) :void
  (self :pointer)
  (eulerX :float)
  (eulerY :float)
  (eulerZ :float))

(cffi:defcfun ("_wrap_btMatrix3x3_setIdentity" btMatrix3x3_setIdentity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getIdentity" btMatrix3x3_getIdentity) :pointer)

(cffi:defcfun ("_wrap_btMatrix3x3_getOpenGLSubMatrix" btMatrix3x3_getOpenGLSubMatrix) :void
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getRotation" btMatrix3x3_getRotation) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getEulerYPR" btMatrix3x3_getEulerYPR) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_getEulerZYX_4" btMatrix3x3_getEulerZYX_4) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer)
  (solution_number :unsigned-int))

(cffi:defcfun ("_wrap_btMatrix3x3_getEulerZYX_3" btMatrix3x3_getEulerZYX_3) :void
  (self :pointer)
  (yaw :pointer)
  (pitch :pointer)
  (roll :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_scaled" btMatrix3x3_scaled) :pointer
  (self :pointer)
  (s :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_determinant" btMatrix3x3_determinant) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_adjoint" btMatrix3x3_adjoint) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_absolute" btMatrix3x3_absolute) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_transpose" btMatrix3x3_transpose) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_inverse" btMatrix3x3_inverse) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_transposeTimes" btMatrix3x3_transposeTimes) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_timesTranspose" btMatrix3x3_timesTranspose) :pointer
  (self :pointer)
  (m :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_tdotx" btMatrix3x3_tdotx) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_tdoty" btMatrix3x3_tdoty) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_tdotz" btMatrix3x3_tdotz) :float
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_diagonalize" btMatrix3x3_diagonalize) :void
  (self :pointer)
  (rot :pointer)
  (threshold :float)
  (maxSteps :int))

(cffi:defcfun ("_wrap_btMatrix3x3_cofac" btMatrix3x3_cofac) :float
  (self :pointer)
  (r1 :int)
  (c1 :int)
  (r2 :int)
  (c2 :int))

(cffi:defcfun ("_wrap_btMatrix3x3_serialize" btMatrix3x3_serialize) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_serializeFloat" btMatrix3x3_serializeFloat) :void
  (self :pointer)
  (dataOut :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_deSerialize" btMatrix3x3_deSerialize) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_deSerializeFloat" btMatrix3x3_deSerializeFloat) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_btMatrix3x3_deSerializeDouble" btMatrix3x3_deSerializeDouble) :void
  (self :pointer)
  (dataIn :pointer))

(cffi:defcfun ("_wrap_delete_btMatrix3x3" delete_btMatrix3x3) :void
  (self :pointer))

(cffi:defcstruct btMatrix3x3FloatData
	(m_el :pointer))

(cffi:defcstruct btMatrix3x3DoubleData
	(m_el :pointer))

(cffi:defcfun ("_wrap_delete_btMotionState" delete_btMotionState) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btMotionState_getWorldTransform" btMotionState_getWorldTransform) :void
  (self :pointer)
  (worldTrans :pointer))

(cffi:defcfun ("_wrap_btMotionState_setWorldTransform" btMotionState_setWorldTransform) :void
  (self :pointer)
  (worldTrans :pointer))

(cl:defconstant BT_USE_PLACEMENT_NEW 1)

(cffi:defcfun ("_wrap_btDefaultMotionState_m_graphicsWorldTrans_set" btDefaultMotionState_m_graphicsWorldTrans_set) :void
  (self :pointer)
  (m_graphicsWorldTrans :pointer))

(cffi:defcfun ("_wrap_btDefaultMotionState_m_graphicsWorldTrans_get" btDefaultMotionState_m_graphicsWorldTrans_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultMotionState_m_centerOfMassOffset_set" btDefaultMotionState_m_centerOfMassOffset_set) :void
  (self :pointer)
  (m_centerOfMassOffset :pointer))

(cffi:defcfun ("_wrap_btDefaultMotionState_m_centerOfMassOffset_get" btDefaultMotionState_m_centerOfMassOffset_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultMotionState_m_startWorldTrans_set" btDefaultMotionState_m_startWorldTrans_set) :void
  (self :pointer)
  (m_startWorldTrans :pointer))

(cffi:defcfun ("_wrap_btDefaultMotionState_m_startWorldTrans_get" btDefaultMotionState_m_startWorldTrans_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultMotionState_m_userPointer_set" btDefaultMotionState_m_userPointer_set) :void
  (self :pointer)
  (m_userPointer :pointer))

(cffi:defcfun ("_wrap_btDefaultMotionState_m_userPointer_get" btDefaultMotionState_m_userPointer_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btDefaultMotionState_default_2" new_btDefaultMotionState_default_2) :pointer
  (startTrans :pointer)
  (centerOfMassOffset :pointer))

(cffi:defcfun ("_wrap_new_btDefaultMotionState_default_1" new_btDefaultMotionState_default_1) :pointer
  (startTrans :pointer))

(cffi:defcfun ("_wrap_new_btDefaultMotionState_default_0" new_btDefaultMotionState_default_0) :pointer)

(cffi:defcfun ("_wrap_btDefaultMotionState_getWorldTransform" btDefaultMotionState_getWorldTransform) :void
  (self :pointer)
  (centerOfMassWorldTrans :pointer))

(cffi:defcfun ("_wrap_btDefaultMotionState_setWorldTransform" btDefaultMotionState_setWorldTransform) :void
  (self :pointer)
  (centerOfMassWorldTrans :pointer))

(cffi:defcfun ("_wrap_delete_btDefaultMotionState" delete_btDefaultMotionState) :void
  (self :pointer))

(cffi:defcstruct btBroadphaseAabbCallback
	(process :pointer))

(cffi:defcstruct btBroadphaseRayCallback
	(m_rayDirectionInverse :pointer)
	(m_signs :pointer)
	(m_lambda_max :float))

(cffi:defcfun ("_wrap_delete_btBroadphaseInterface" delete_btBroadphaseInterface) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_createProxy" btBroadphaseInterface_createProxy) :pointer
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (shapeType :int)
  (userPtr :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short)
  (dispatcher :pointer)
  (multiSapProxy :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_destroyProxy" btBroadphaseInterface_destroyProxy) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_setAabb" btBroadphaseInterface_setAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_getAabb" btBroadphaseInterface_getAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_rayTest__SWIG_0" btBroadphaseInterface_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_rayTest__SWIG_1" btBroadphaseInterface_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_rayTest__SWIG_2" btBroadphaseInterface_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_aabbTest" btBroadphaseInterface_aabbTest) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (callback :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_calculateOverlappingPairs" btBroadphaseInterface_calculateOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_0" btBroadphaseInterface_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_1" btBroadphaseInterface_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_getBroadphaseAabb" btBroadphaseInterface_getBroadphaseAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_resetPool" btBroadphaseInterface_resetPool) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btBroadphaseInterface_printStats" btBroadphaseInterface_printStats) :void
  (self :pointer))

(cl:defconstant DBVT_BP_PROFILE 0)

(cl:defconstant DBVT_BP_PREVENTFALSEUPDATE 0)

(cl:defconstant DBVT_BP_ACCURATESLEEPING 0)

(cl:defconstant DBVT_BP_ENABLE_BENCHMARK 0)

(cffi:defcstruct btDbvtProxy
	(leaf :pointer)
	(links :pointer)
	(stage :int))

(defanonenum 
	(DYNAMIC_SET #.0)
	(FIXED_SET #.1)
	(STAGECOUNT #.2))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_sets_set" btDbvtBroadphase_m_sets_set) :void
  (self :pointer)
  (m_sets :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_sets_get" btDbvtBroadphase_m_sets_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_stageRoots_set" btDbvtBroadphase_m_stageRoots_set) :void
  (self :pointer)
  (m_stageRoots :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_stageRoots_get" btDbvtBroadphase_m_stageRoots_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_paircache_set" btDbvtBroadphase_m_paircache_set) :void
  (self :pointer)
  (m_paircache :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_paircache_get" btDbvtBroadphase_m_paircache_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_prediction_set" btDbvtBroadphase_m_prediction_set) :void
  (self :pointer)
  (m_prediction :float))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_prediction_get" btDbvtBroadphase_m_prediction_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_stageCurrent_set" btDbvtBroadphase_m_stageCurrent_set) :void
  (self :pointer)
  (m_stageCurrent :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_stageCurrent_get" btDbvtBroadphase_m_stageCurrent_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_fupdates_set" btDbvtBroadphase_m_fupdates_set) :void
  (self :pointer)
  (m_fupdates :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_fupdates_get" btDbvtBroadphase_m_fupdates_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_dupdates_set" btDbvtBroadphase_m_dupdates_set) :void
  (self :pointer)
  (m_dupdates :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_dupdates_get" btDbvtBroadphase_m_dupdates_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_cupdates_set" btDbvtBroadphase_m_cupdates_set) :void
  (self :pointer)
  (m_cupdates :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_cupdates_get" btDbvtBroadphase_m_cupdates_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_newpairs_set" btDbvtBroadphase_m_newpairs_set) :void
  (self :pointer)
  (m_newpairs :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_newpairs_get" btDbvtBroadphase_m_newpairs_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_fixedleft_set" btDbvtBroadphase_m_fixedleft_set) :void
  (self :pointer)
  (m_fixedleft :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_fixedleft_get" btDbvtBroadphase_m_fixedleft_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_call_set" btDbvtBroadphase_m_updates_call_set) :void
  (self :pointer)
  (m_updates_call :unsigned-int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_call_get" btDbvtBroadphase_m_updates_call_get) :unsigned-int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_done_set" btDbvtBroadphase_m_updates_done_set) :void
  (self :pointer)
  (m_updates_done :unsigned-int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_done_get" btDbvtBroadphase_m_updates_done_get) :unsigned-int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_ratio_set" btDbvtBroadphase_m_updates_ratio_set) :void
  (self :pointer)
  (m_updates_ratio :float))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_updates_ratio_get" btDbvtBroadphase_m_updates_ratio_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_pid_set" btDbvtBroadphase_m_pid_set) :void
  (self :pointer)
  (m_pid :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_pid_get" btDbvtBroadphase_m_pid_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_cid_set" btDbvtBroadphase_m_cid_set) :void
  (self :pointer)
  (m_cid :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_cid_get" btDbvtBroadphase_m_cid_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_gid_set" btDbvtBroadphase_m_gid_set) :void
  (self :pointer)
  (m_gid :int))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_gid_get" btDbvtBroadphase_m_gid_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_releasepaircache_set" btDbvtBroadphase_m_releasepaircache_set) :void
  (self :pointer)
  (m_releasepaircache :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_releasepaircache_get" btDbvtBroadphase_m_releasepaircache_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_deferedcollide_set" btDbvtBroadphase_m_deferedcollide_set) :void
  (self :pointer)
  (m_deferedcollide :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_deferedcollide_get" btDbvtBroadphase_m_deferedcollide_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_needcleanup_set" btDbvtBroadphase_m_needcleanup_set) :void
  (self :pointer)
  (m_needcleanup :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_m_needcleanup_get" btDbvtBroadphase_m_needcleanup_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btDbvtBroadphase_paircache" new_btDbvtBroadphase_paircache) :pointer
  (paircache :pointer))

(cffi:defcfun ("_wrap_new_btDbvtBroadphase" new_btDbvtBroadphase) :pointer)

(cffi:defcfun ("_wrap_delete_btDbvtBroadphase" delete_btDbvtBroadphase) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_collide" btDbvtBroadphase_collide) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_optimize" btDbvtBroadphase_optimize) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_createProxy" btDbvtBroadphase_createProxy) :pointer
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (shapeType :int)
  (userPtr :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short)
  (dispatcher :pointer)
  (multiSapProxy :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_destroyProxy" btDbvtBroadphase_destroyProxy) :void
  (self :pointer)
  (proxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_setAabb" btDbvtBroadphase_setAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_rayTest__SWIG_0" btDbvtBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_rayTest__SWIG_1" btDbvtBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer)
  (aabbMin :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_rayTest__SWIG_2" btDbvtBroadphase_rayTest) :void
  (self :pointer)
  (rayFrom :pointer)
  (rayTo :pointer)
  (rayCallback :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_aabbTest" btDbvtBroadphase_aabbTest) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (callback :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getAabb" btDbvtBroadphase_getAabb) :void
  (self :pointer)
  (proxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_calculateOverlappingPairs" btDbvtBroadphase_calculateOverlappingPairs) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getOverlappingPairCache__SWIG_0" btDbvtBroadphase_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getOverlappingPairCache__SWIG_1" btDbvtBroadphase_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getBroadphaseAabb" btDbvtBroadphase_getBroadphaseAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_printStats" btDbvtBroadphase_printStats) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_resetPool" btDbvtBroadphase_resetPool) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_performDeferredRemoval" btDbvtBroadphase_performDeferredRemoval) :void
  (self :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_setVelocityPrediction" btDbvtBroadphase_setVelocityPrediction) :void
  (self :pointer)
  (prediction :float))

(cffi:defcfun ("_wrap_btDbvtBroadphase_getVelocityPrediction" btDbvtBroadphase_getVelocityPrediction) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_setAabbForceUpdate" btDbvtBroadphase_setAabbForceUpdate) :void
  (self :pointer)
  (absproxy :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (arg4 :pointer))

(cffi:defcfun ("_wrap_btDbvtBroadphase_benchmark" btDbvtBroadphase_benchmark) :void
  (arg0 :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionConfiguration" delete_btCollisionConfiguration) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionConfiguration_getPersistentManifoldPool" btCollisionConfiguration_getPersistentManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionConfiguration_getCollisionAlgorithmPool" btCollisionConfiguration_getCollisionAlgorithmPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionConfiguration_getCollisionAlgorithmCreateFunc" btCollisionConfiguration_getCollisionAlgorithmCreateFunc) :pointer
  (self :pointer)
  (proxyType0 :int)
  (proxyType1 :int))

(cffi:defcstruct btDefaultCollisionConstructionInfo
	(m_persistentManifoldPool :pointer)
	(m_collisionAlgorithmPool :pointer)
	(m_defaultMaxPersistentManifoldPoolSize :int)
	(m_defaultMaxCollisionAlgorithmPoolSize :int)
	(m_customCollisionAlgorithmMaxElementSize :int)
	(m_useEpaPenetrationAlgorithm :int))

(cffi:defcfun ("_wrap_new_btDefaultCollisionConfiguration_1" new_btDefaultCollisionConfiguration_1) :pointer
  (constructionInfo :pointer))

(cffi:defcfun ("_wrap_new_btDefaultCollisionConfiguration_0" new_btDefaultCollisionConfiguration_0) :pointer)

(cffi:defcfun ("_wrap_delete_btDefaultCollisionConfiguration" delete_btDefaultCollisionConfiguration) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getPersistentManifoldPool" btDefaultCollisionConfiguration_getPersistentManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getCollisionAlgorithmPool" btDefaultCollisionConfiguration_getCollisionAlgorithmPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getSimplexSolver" btDefaultCollisionConfiguration_getSimplexSolver) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc" btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc) :pointer
  (self :pointer)
  (proxyType0 :int)
  (proxyType1 :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0" btDefaultCollisionConfiguration_setConvexConvexMultipointIterations) :void
  (self :pointer)
  (numPerturbationIterations :int)
  (minimumPointsPerturbationThreshold :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1" btDefaultCollisionConfiguration_setConvexConvexMultipointIterations) :void
  (self :pointer)
  (numPerturbationIterations :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2" btDefaultCollisionConfiguration_setConvexConvexMultipointIterations) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0" btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations) :void
  (self :pointer)
  (numPerturbationIterations :int)
  (minimumPointsPerturbationThreshold :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1" btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations) :void
  (self :pointer)
  (numPerturbationIterations :int))

(cffi:defcfun ("_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2" btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations) :void
  (self :pointer))

(cl:defconstant USE_DISPATCH_REGISTRY_ARRAY 1)

(cffi:defcenum DispatcherFlags
	(:CD_STATIC_STATIC_REPORTED #.1)
	(:CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD #.2)
	(:CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION #.4))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getDispatcherFlags" btCollisionDispatcher_getDispatcherFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_setDispatcherFlags" btCollisionDispatcher_setDispatcherFlags) :void
  (self :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_btCollisionDispatcher_registerCollisionCreateFunc" btCollisionDispatcher_registerCollisionCreateFunc) :void
  (self :pointer)
  (proxyType0 :int)
  (proxyType1 :int)
  (createFunc :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getNumManifolds" btCollisionDispatcher_getNumManifolds) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getInternalManifoldPointer" btCollisionDispatcher_getInternalManifoldPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0" btCollisionDispatcher_getManifoldByIndexInternal) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_1" btCollisionDispatcher_getManifoldByIndexInternal) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_new_btCollisionDispatcher" new_btCollisionDispatcher) :pointer
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionDispatcher" delete_btCollisionDispatcher) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getNewManifold" btCollisionDispatcher_getNewManifold) :pointer
  (self :pointer)
  (b0 :pointer)
  (b1 :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_releaseManifold" btCollisionDispatcher_releaseManifold) :void
  (self :pointer)
  (manifold :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_clearManifold" btCollisionDispatcher_clearManifold) :void
  (self :pointer)
  (manifold :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_findAlgorithm__SWIG_0" btCollisionDispatcher_findAlgorithm) :pointer
  (self :pointer)
  (body0Wrap :pointer)
  (body1Wrap :pointer)
  (sharedManifold :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_findAlgorithm__SWIG_1" btCollisionDispatcher_findAlgorithm) :pointer
  (self :pointer)
  (body0Wrap :pointer)
  (body1Wrap :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_needsCollision" btCollisionDispatcher_needsCollision) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_needsResponse" btCollisionDispatcher_needsResponse) :pointer
  (self :pointer)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_dispatchAllCollisionPairs" btCollisionDispatcher_dispatchAllCollisionPairs) :void
  (self :pointer)
  (pairCache :pointer)
  (dispatchInfo :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_setNearCallback" btCollisionDispatcher_setNearCallback) :void
  (self :pointer)
  (nearCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getNearCallback" btCollisionDispatcher_getNearCallback) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_defaultNearCallback" btCollisionDispatcher_defaultNearCallback) :void
  (collisionPair :pointer)
  (dispatcher :pointer)
  (dispatchInfo :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_allocateCollisionAlgorithm" btCollisionDispatcher_allocateCollisionAlgorithm) :pointer
  (self :pointer)
  (size :int))

(cffi:defcfun ("_wrap_btCollisionDispatcher_freeCollisionAlgorithm" btCollisionDispatcher_freeCollisionAlgorithm) :void
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_0" btCollisionDispatcher_getCollisionConfiguration) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_1" btCollisionDispatcher_getCollisionConfiguration) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_setCollisionConfiguration" btCollisionDispatcher_setCollisionConfiguration) :void
  (self :pointer)
  (config :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_0" btCollisionDispatcher_getInternalManifoldPool) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_1" btCollisionDispatcher_getInternalManifoldPool) :pointer
  (self :pointer))

(cl:defconstant ACTIVE_TAG 1)

(cl:defconstant ISLAND_SLEEPING 2)

(cl:defconstant WANTS_DEACTIVATION 3)

(cl:defconstant DISABLE_DEACTIVATION 4)

(cl:defconstant DISABLE_SIMULATION 5)

(cl:defconstant btCollisionObjectDataName "btCollisionObjectFloatData")

(cffi:defcenum CollisionFlags
	(:CF_STATIC_OBJECT #.1)
	(:CF_KINEMATIC_OBJECT #.2)
	(:CF_NO_CONTACT_RESPONSE #.4)
	(:CF_CUSTOM_MATERIAL_CALLBACK #.8)
	(:CF_CHARACTER_OBJECT #.16)
	(:CF_DISABLE_VISUALIZE_OBJECT #.32)
	(:CF_DISABLE_SPU_COLLISION_PROCESSING #.64))

(cffi:defcenum CollisionObjectTypes
	(:CO_COLLISION_OBJECT #.1)
	(:CO_RIGID_BODY #.2)
	(:CO_GHOST_OBJECT #.4)
	(:CO_SOFT_BODY #.8)
	(:CO_HF_FLUID #.16)
	(:CO_USER_TYPE #.32)
	(:CO_FEATHERSTONE_LINK #.64))

(cffi:defcenum AnisotropicFrictionFlags
	(:CF_ANISOTROPIC_FRICTION_DISABLED #.0)
	(:CF_ANISOTROPIC_FRICTION #.1)
	(:CF_ANISOTROPIC_ROLLING_FRICTION #.2))

(cffi:defcfun ("_wrap_btCollisionObject_mergesSimulationIslands" btCollisionObject_mergesSimulationIslands) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getAnisotropicFriction" btCollisionObject_getAnisotropicFriction) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setAnisotropicFriction__SWIG_0" btCollisionObject_setAnisotropicFriction) :void
  (self :pointer)
  (anisotropicFriction :pointer)
  (frictionMode :int))

(cffi:defcfun ("_wrap_btCollisionObject_setAnisotropicFriction__SWIG_1" btCollisionObject_setAnisotropicFriction) :void
  (self :pointer)
  (anisotropicFriction :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_hasAnisotropicFriction__SWIG_0" btCollisionObject_hasAnisotropicFriction) :pointer
  (self :pointer)
  (frictionMode :int))

(cffi:defcfun ("_wrap_btCollisionObject_hasAnisotropicFriction__SWIG_1" btCollisionObject_hasAnisotropicFriction) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setContactProcessingThreshold" btCollisionObject_setContactProcessingThreshold) :void
  (self :pointer)
  (contactProcessingThreshold :float))

(cffi:defcfun ("_wrap_btCollisionObject_getContactProcessingThreshold" btCollisionObject_getContactProcessingThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_isStaticObject" btCollisionObject_isStaticObject) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_isKinematicObject" btCollisionObject_isKinematicObject) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_isStaticOrKinematicObject" btCollisionObject_isStaticOrKinematicObject) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_hasContactResponse" btCollisionObject_hasContactResponse) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCollisionObject" new_btCollisionObject) :pointer)

(cffi:defcfun ("_wrap_delete_btCollisionObject" delete_btCollisionObject) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCollisionShape" btCollisionObject_setCollisionShape) :void
  (self :pointer)
  (collisionShape :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionShape__SWIG_0" btCollisionObject_getCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionShape__SWIG_1" btCollisionObject_getCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_internalGetExtensionPointer" btCollisionObject_internalGetExtensionPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_internalSetExtensionPointer" btCollisionObject_internalSetExtensionPointer) :void
  (self :pointer)
  (pointer :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getActivationState" btCollisionObject_getActivationState) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setActivationState" btCollisionObject_setActivationState) :void
  (self :pointer)
  (newState :int))

(cffi:defcfun ("_wrap_btCollisionObject_setDeactivationTime" btCollisionObject_setDeactivationTime) :void
  (self :pointer)
  (time :float))

(cffi:defcfun ("_wrap_btCollisionObject_getDeactivationTime" btCollisionObject_getDeactivationTime) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_forceActivationState" btCollisionObject_forceActivationState) :void
  (self :pointer)
  (newState :int))

(cffi:defcfun ("_wrap_btCollisionObject_activate__SWIG_0" btCollisionObject_activate) :void
  (self :pointer)
  (forceActivation :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_activate__SWIG_1" btCollisionObject_activate) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_isActive" btCollisionObject_isActive) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setRestitution" btCollisionObject_setRestitution) :void
  (self :pointer)
  (rest :float))

(cffi:defcfun ("_wrap_btCollisionObject_getRestitution" btCollisionObject_getRestitution) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setFriction" btCollisionObject_setFriction) :void
  (self :pointer)
  (frict :float))

(cffi:defcfun ("_wrap_btCollisionObject_getFriction" btCollisionObject_getFriction) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setRollingFriction" btCollisionObject_setRollingFriction) :void
  (self :pointer)
  (frict :float))

(cffi:defcfun ("_wrap_btCollisionObject_getRollingFriction" btCollisionObject_getRollingFriction) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInternalType" btCollisionObject_getInternalType) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getWorldTransform__SWIG_0" btCollisionObject_getWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getWorldTransform__SWIG_1" btCollisionObject_getWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setWorldTransform" btCollisionObject_setWorldTransform) :void
  (self :pointer)
  (worldTrans :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getBroadphaseHandle__SWIG_0" btCollisionObject_getBroadphaseHandle) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getBroadphaseHandle__SWIG_1" btCollisionObject_getBroadphaseHandle) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setBroadphaseHandle" btCollisionObject_setBroadphaseHandle) :void
  (self :pointer)
  (handle :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_0" btCollisionObject_getInterpolationWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_1" btCollisionObject_getInterpolationWorldTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationWorldTransform" btCollisionObject_setInterpolationWorldTransform) :void
  (self :pointer)
  (trans :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationLinearVelocity" btCollisionObject_setInterpolationLinearVelocity) :void
  (self :pointer)
  (linvel :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationAngularVelocity" btCollisionObject_setInterpolationAngularVelocity) :void
  (self :pointer)
  (angvel :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationLinearVelocity" btCollisionObject_getInterpolationLinearVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationAngularVelocity" btCollisionObject_getInterpolationAngularVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getIslandTag" btCollisionObject_getIslandTag) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setIslandTag" btCollisionObject_setIslandTag) :void
  (self :pointer)
  (tag :int))

(cffi:defcfun ("_wrap_btCollisionObject_getCompanionId" btCollisionObject_getCompanionId) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCompanionId" btCollisionObject_setCompanionId) :void
  (self :pointer)
  (id :int))

(cffi:defcfun ("_wrap_btCollisionObject_getHitFraction" btCollisionObject_getHitFraction) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setHitFraction" btCollisionObject_setHitFraction) :void
  (self :pointer)
  (hitFraction :float))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionFlags" btCollisionObject_getCollisionFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCollisionFlags" btCollisionObject_setCollisionFlags) :void
  (self :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdSweptSphereRadius" btCollisionObject_getCcdSweptSphereRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCcdSweptSphereRadius" btCollisionObject_setCcdSweptSphereRadius) :void
  (self :pointer)
  (radius :float))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdMotionThreshold" btCollisionObject_getCcdMotionThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdSquareMotionThreshold" btCollisionObject_getCcdSquareMotionThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setCcdMotionThreshold" btCollisionObject_setCcdMotionThreshold) :void
  (self :pointer)
  (ccdMotionThreshold :float))

(cffi:defcfun ("_wrap_btCollisionObject_getUserPointer" btCollisionObject_getUserPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_getUserIndex" btCollisionObject_getUserIndex) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setUserPointer" btCollisionObject_setUserPointer) :void
  (self :pointer)
  (userPointer :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_setUserIndex" btCollisionObject_setUserIndex) :void
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btCollisionObject_getUpdateRevisionInternal" btCollisionObject_getUpdateRevisionInternal) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_checkCollideWith" btCollisionObject_checkCollideWith) :pointer
  (self :pointer)
  (co :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_calculateSerializeBufferSize" btCollisionObject_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_serialize" btCollisionObject_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btCollisionObject_serializeSingleObject" btCollisionObject_serializeSingleObject) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcstruct btCollisionObjectDoubleData
	(m_broadphaseHandle :pointer)
	(m_collisionShape :pointer)
	(m_rootCollisionShape :pointer)
	(m_name :string)
	(m_worldTransform btTransformDoubleData)
	(m_interpolationWorldTransform btTransformDoubleData)
	(m_interpolationLinearVelocity btVector3DoubleData)
	(m_interpolationAngularVelocity btVector3DoubleData)
	(m_anisotropicFriction btVector3DoubleData)
	(m_contactProcessingThreshold :double)
	(m_deactivationTime :double)
	(m_friction :double)
	(m_rollingFriction :double)
	(m_restitution :double)
	(m_hitFraction :double)
	(m_ccdSweptSphereRadius :double)
	(m_ccdMotionThreshold :double)
	(m_hasAnisotropicFriction :int)
	(m_collisionFlags :int)
	(m_islandTag1 :int)
	(m_companionId :int)
	(m_activationState1 :int)
	(m_internalType :int)
	(m_checkCollideWith :int)
	(m_padding :pointer))

(cffi:defcstruct btCollisionObjectFloatData
	(m_broadphaseHandle :pointer)
	(m_collisionShape :pointer)
	(m_rootCollisionShape :pointer)
	(m_name :string)
	(m_worldTransform btTransformFloatData)
	(m_interpolationWorldTransform btTransformFloatData)
	(m_interpolationLinearVelocity btVector3FloatData)
	(m_interpolationAngularVelocity btVector3FloatData)
	(m_anisotropicFriction btVector3FloatData)
	(m_contactProcessingThreshold :float)
	(m_deactivationTime :float)
	(m_friction :float)
	(m_rollingFriction :float)
	(m_restitution :float)
	(m_hitFraction :float)
	(m_ccdSweptSphereRadius :float)
	(m_ccdMotionThreshold :float)
	(m_hasAnisotropicFriction :int)
	(m_collisionFlags :int)
	(m_islandTag1 :int)
	(m_companionId :int)
	(m_activationState1 :int)
	(m_internalType :int)
	(m_checkCollideWith :int)
	(m_padding :pointer))

(cffi:defcfun ("_wrap_new_btCollisionWorld" new_btCollisionWorld) :pointer
  (dispatcher :pointer)
  (broadphasePairCache :pointer)
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionWorld" delete_btCollisionWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_setBroadphase" btCollisionWorld_setBroadphase) :void
  (self :pointer)
  (pairCache :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getBroadphase__SWIG_0" btCollisionWorld_getBroadphase) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getBroadphase__SWIG_1" btCollisionWorld_getBroadphase) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getPairCache" btCollisionWorld_getPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatcher__SWIG_0" btCollisionWorld_getDispatcher) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatcher__SWIG_1" btCollisionWorld_getDispatcher) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_updateSingleAabb" btCollisionWorld_updateSingleAabb) :void
  (self :pointer)
  (colObj :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_updateAabbs" btCollisionWorld_updateAabbs) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_computeOverlappingPairs" btCollisionWorld_computeOverlappingPairs) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_setDebugDrawer" btCollisionWorld_setDebugDrawer) :void
  (self :pointer)
  (debugDrawer :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDebugDrawer" btCollisionWorld_getDebugDrawer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_debugDrawWorld" btCollisionWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_debugDrawObject" btCollisionWorld_debugDrawObject) :void
  (self :pointer)
  (worldTransform :pointer)
  (shape :pointer)
  (color :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getNumCollisionObjects" btCollisionWorld_getNumCollisionObjects) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_rayTest" btCollisionWorld_rayTest) :void
  (self :pointer)
  (rayFromWorld :pointer)
  (rayToWorld :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_convexSweepTest__SWIG_0" btCollisionWorld_convexSweepTest) :void
  (self :pointer)
  (castShape :pointer)
  (from :pointer)
  (to :pointer)
  (resultCallback :pointer)
  (allowedCcdPenetration :float))

(cffi:defcfun ("_wrap_btCollisionWorld_convexSweepTest__SWIG_1" btCollisionWorld_convexSweepTest) :void
  (self :pointer)
  (castShape :pointer)
  (from :pointer)
  (to :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_contactTest" btCollisionWorld_contactTest) :void
  (self :pointer)
  (colObj :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_contactPairTest" btCollisionWorld_contactPairTest) :void
  (self :pointer)
  (colObjA :pointer)
  (colObjB :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_rayTestSingle" btCollisionWorld_rayTestSingle) :void
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObject :pointer)
  (collisionShape :pointer)
  (colObjWorldTransform :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_rayTestSingleInternal" btCollisionWorld_rayTestSingleInternal) :void
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObjectWrap :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_objectQuerySingle" btCollisionWorld_objectQuerySingle) :void
  (castShape :pointer)
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObject :pointer)
  (collisionShape :pointer)
  (colObjWorldTransform :pointer)
  (resultCallback :pointer)
  (allowedPenetration :float))

(cffi:defcfun ("_wrap_btCollisionWorld_objectQuerySingleInternal" btCollisionWorld_objectQuerySingleInternal) :void
  (castShape :pointer)
  (convexFromTrans :pointer)
  (convexToTrans :pointer)
  (colObjWrap :pointer)
  (resultCallback :pointer)
  (allowedPenetration :float))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_0" btCollisionWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_1" btCollisionWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_2" btCollisionWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getCollisionObjectArray__SWIG_0" btCollisionWorld_getCollisionObjectArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getCollisionObjectArray__SWIG_1" btCollisionWorld_getCollisionObjectArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_removeCollisionObject" btCollisionWorld_removeCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_performDiscreteCollisionDetection" btCollisionWorld_performDiscreteCollisionDetection) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatchInfo__SWIG_0" btCollisionWorld_getDispatchInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatchInfo__SWIG_1" btCollisionWorld_getDispatchInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_getForceUpdateAllAabbs" btCollisionWorld_getForceUpdateAllAabbs) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_setForceUpdateAllAabbs" btCollisionWorld_setForceUpdateAllAabbs) :void
  (self :pointer)
  (forceUpdateAllAabbs :pointer))

(cffi:defcfun ("_wrap_btCollisionWorld_serialize" btCollisionWorld_serialize) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btGhostObject" new_btGhostObject) :pointer)

(cffi:defcfun ("_wrap_delete_btGhostObject" delete_btGhostObject) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGhostObject_convexSweepTest__SWIG_0" btGhostObject_convexSweepTest) :void
  (self :pointer)
  (castShape :pointer)
  (convexFromWorld :pointer)
  (convexToWorld :pointer)
  (resultCallback :pointer)
  (allowedCcdPenetration :float))

(cffi:defcfun ("_wrap_btGhostObject_convexSweepTest__SWIG_1" btGhostObject_convexSweepTest) :void
  (self :pointer)
  (castShape :pointer)
  (convexFromWorld :pointer)
  (convexToWorld :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btGhostObject_rayTest" btGhostObject_rayTest) :void
  (self :pointer)
  (rayFromWorld :pointer)
  (rayToWorld :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btGhostObject_addOverlappingObjectInternal__SWIG_0" btGhostObject_addOverlappingObjectInternal) :void
  (self :pointer)
  (otherProxy :pointer)
  (thisProxy :pointer))

(cffi:defcfun ("_wrap_btGhostObject_addOverlappingObjectInternal__SWIG_1" btGhostObject_addOverlappingObjectInternal) :void
  (self :pointer)
  (otherProxy :pointer))

(cffi:defcfun ("_wrap_btGhostObject_removeOverlappingObjectInternal__SWIG_0" btGhostObject_removeOverlappingObjectInternal) :void
  (self :pointer)
  (otherProxy :pointer)
  (dispatcher :pointer)
  (thisProxy :pointer))

(cffi:defcfun ("_wrap_btGhostObject_removeOverlappingObjectInternal__SWIG_1" btGhostObject_removeOverlappingObjectInternal) :void
  (self :pointer)
  (otherProxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btGhostObject_getNumOverlappingObjects" btGhostObject_getNumOverlappingObjects) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btGhostObject_getOverlappingObject__SWIG_0" btGhostObject_getOverlappingObject) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btGhostObject_getOverlappingObject__SWIG_1" btGhostObject_getOverlappingObject) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btGhostObject_getOverlappingPairs__SWIG_0" btGhostObject_getOverlappingPairs) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGhostObject_getOverlappingPairs__SWIG_1" btGhostObject_getOverlappingPairs) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGhostObject_upcast__SWIG_0" btGhostObject_upcast) :pointer
  (colObj :pointer))

(cffi:defcfun ("_wrap_btGhostObject_upcast__SWIG_1" btGhostObject_upcast) :pointer
  (colObj :pointer))

(cffi:defcfun ("_wrap_new_btPairCachingGhostObject" new_btPairCachingGhostObject) :pointer)

(cffi:defcfun ("_wrap_delete_btPairCachingGhostObject" delete_btPairCachingGhostObject) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btPairCachingGhostObject_addOverlappingObjectInternal__SWIG_0" btPairCachingGhostObject_addOverlappingObjectInternal) :void
  (self :pointer)
  (otherProxy :pointer)
  (thisProxy :pointer))

(cffi:defcfun ("_wrap_btPairCachingGhostObject_addOverlappingObjectInternal__SWIG_1" btPairCachingGhostObject_addOverlappingObjectInternal) :void
  (self :pointer)
  (otherProxy :pointer))

(cffi:defcfun ("_wrap_btPairCachingGhostObject_removeOverlappingObjectInternal__SWIG_0" btPairCachingGhostObject_removeOverlappingObjectInternal) :void
  (self :pointer)
  (otherProxy :pointer)
  (dispatcher :pointer)
  (thisProxy :pointer))

(cffi:defcfun ("_wrap_btPairCachingGhostObject_removeOverlappingObjectInternal__SWIG_1" btPairCachingGhostObject_removeOverlappingObjectInternal) :void
  (self :pointer)
  (otherProxy :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btPairCachingGhostObject_getOverlappingPairCache" btPairCachingGhostObject_getOverlappingPairCache) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btGhostPairCallback" new_btGhostPairCallback) :pointer)

(cffi:defcfun ("_wrap_delete_btGhostPairCallback" delete_btGhostPairCallback) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGhostPairCallback_addOverlappingPair" btGhostPairCallback_addOverlappingPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer))

(cffi:defcfun ("_wrap_btGhostPairCallback_removeOverlappingPair" btGhostPairCallback_removeOverlappingPair) :pointer
  (self :pointer)
  (proxy0 :pointer)
  (proxy1 :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btGhostPairCallback_removeOverlappingPairsContainingProxy" btGhostPairCallback_removeOverlappingPairsContainingProxy) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("_wrap_delete_btCollisionShape" delete_btCollisionShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getAabb" btCollisionShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getBoundingSphere" btCollisionShape_getBoundingSphere) :void
  (self :pointer)
  (center :pointer)
  (radius :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getAngularMotionDisc" btCollisionShape_getAngularMotionDisc) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getContactBreakingThreshold" btCollisionShape_getContactBreakingThreshold) :float
  (self :pointer)
  (defaultContactThresholdFactor :float))

(cffi:defcfun ("_wrap_btCollisionShape_calculateTemporalAabb" btCollisionShape_calculateTemporalAabb) :void
  (self :pointer)
  (curTrans :pointer)
  (linvel :pointer)
  (angvel :pointer)
  (timeStep :float)
  (temporalAabbMin :pointer)
  (temporalAabbMax :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isPolyhedral" btCollisionShape_isPolyhedral) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isConvex2d" btCollisionShape_isConvex2d) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isConvex" btCollisionShape_isConvex) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isNonMoving" btCollisionShape_isNonMoving) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isConcave" btCollisionShape_isConcave) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isCompound" btCollisionShape_isCompound) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isSoftBody" btCollisionShape_isSoftBody) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_isInfinite" btCollisionShape_isInfinite) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_setLocalScaling" btCollisionShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getLocalScaling" btCollisionShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_calculateLocalInertia" btCollisionShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getName" btCollisionShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getShapeType" btCollisionShape_getShapeType) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getAnisotropicRollingFrictionDirection" btCollisionShape_getAnisotropicRollingFrictionDirection) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_setMargin" btCollisionShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btCollisionShape_getMargin" btCollisionShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_setUserPointer" btCollisionShape_setUserPointer) :void
  (self :pointer)
  (userPtr :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_getUserPointer" btCollisionShape_getUserPointer) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_calculateSerializeBufferSize" btCollisionShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_serialize" btCollisionShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btCollisionShape_serializeSingleShape" btCollisionShape_serializeSingleShape) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcstruct btCollisionShapeData
	(m_name :string)
	(m_shapeType :int)
	(m_padding :pointer))

(cl:defconstant MAX_PREFERRED_PENETRATION_DIRECTIONS 10)

(cffi:defcfun ("_wrap_delete_btConvexShape" delete_btConvexShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_localGetSupportingVertex" btConvexShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexShape_localGetSupportingVertexWithoutMargin" btConvexShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexShape_localGetSupportVertexWithoutMarginNonVirtual" btConvexShape_localGetSupportVertexWithoutMarginNonVirtual) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexShape_localGetSupportVertexNonVirtual" btConvexShape_localGetSupportVertexNonVirtual) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getMarginNonVirtual" btConvexShape_getMarginNonVirtual) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getAabbNonVirtual" btConvexShape_getAabbNonVirtual) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexShape_project" btConvexShape_project) :void
  (self :pointer)
  (trans :pointer)
  (dir :pointer)
  (min :pointer)
  (max :pointer))

(cffi:defcfun ("_wrap_btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btConvexShape_getAabb" btConvexShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getAabbSlow" btConvexShape_getAabbSlow) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexShape_setLocalScaling" btConvexShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getLocalScaling" btConvexShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_setMargin" btConvexShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btConvexShape_getMargin" btConvexShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getNumPreferredPenetrationDirections" btConvexShape_getNumPreferredPenetrationDirections) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexShape_getPreferredPenetrationDirection" btConvexShape_getPreferredPenetrationDirection) :void
  (self :pointer)
  (index :int)
  (penetrationVector :pointer))

(cffi:defcfun ("_wrap_delete_btConvexInternalShape" delete_btConvexInternalShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_localGetSupportingVertex" btConvexInternalShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getImplicitShapeDimensions" btConvexInternalShape_getImplicitShapeDimensions) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_setImplicitShapeDimensions" btConvexInternalShape_setImplicitShapeDimensions) :void
  (self :pointer)
  (dimensions :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_setSafeMargin__SWIG_0" btConvexInternalShape_setSafeMargin) :void
  (self :pointer)
  (minDimension :float)
  (defaultMarginMultiplier :float))

(cffi:defcfun ("_wrap_btConvexInternalShape_setSafeMargin__SWIG_1" btConvexInternalShape_setSafeMargin) :void
  (self :pointer)
  (minDimension :float))

(cffi:defcfun ("_wrap_btConvexInternalShape_setSafeMargin__SWIG_2" btConvexInternalShape_setSafeMargin) :void
  (self :pointer)
  (halfExtents :pointer)
  (defaultMarginMultiplier :float))

(cffi:defcfun ("_wrap_btConvexInternalShape_setSafeMargin__SWIG_3" btConvexInternalShape_setSafeMargin) :void
  (self :pointer)
  (halfExtents :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getAabb" btConvexInternalShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getAabbSlow" btConvexInternalShape_getAabbSlow) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_setLocalScaling" btConvexInternalShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getLocalScaling" btConvexInternalShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getLocalScalingNV" btConvexInternalShape_getLocalScalingNV) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_setMargin" btConvexInternalShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btConvexInternalShape_getMargin" btConvexInternalShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getMarginNV" btConvexInternalShape_getMarginNV) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getNumPreferredPenetrationDirections" btConvexInternalShape_getNumPreferredPenetrationDirections) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_getPreferredPenetrationDirection" btConvexInternalShape_getPreferredPenetrationDirection) :void
  (self :pointer)
  (index :int)
  (penetrationVector :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_calculateSerializeBufferSize" btConvexInternalShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexInternalShape_serialize" btConvexInternalShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcstruct btConvexInternalShapeData
	(m_collisionShapeData btCollisionShapeData)
	(m_localScaling btVector3FloatData)
	(m_implicitShapeDimensions btVector3FloatData)
	(m_collisionMargin :float)
	(m_padding :int))

(cffi:defcfun ("_wrap_btConvexInternalAabbCachingShape_setLocalScaling" btConvexInternalAabbCachingShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexInternalAabbCachingShape_getAabb" btConvexInternalAabbCachingShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConvexInternalAabbCachingShape_recalcLocalAabb" btConvexInternalAabbCachingShape_recalcLocalAabb) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btConvexInternalAabbCachingShape" delete_btConvexInternalAabbCachingShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btPolyhedralConvexShape" delete_btPolyhedralConvexShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_0" btPolyhedralConvexShape_initializePolyhedralFeatures) :pointer
  (self :pointer)
  (shiftVerticesByMargin :int))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_1" btPolyhedralConvexShape_initializePolyhedralFeatures) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getConvexPolyhedron" btPolyhedralConvexShape_getConvexPolyhedron) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin" btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_calculateLocalInertia" btPolyhedralConvexShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getNumVertices" btPolyhedralConvexShape_getNumVertices) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getNumEdges" btPolyhedralConvexShape_getNumEdges) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getEdge" btPolyhedralConvexShape_getEdge) :void
  (self :pointer)
  (i :int)
  (pa :pointer)
  (pb :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getVertex" btPolyhedralConvexShape_getVertex) :void
  (self :pointer)
  (i :int)
  (vtx :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getNumPlanes" btPolyhedralConvexShape_getNumPlanes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_getPlane" btPolyhedralConvexShape_getPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeSupport :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btPolyhedralConvexShape_isInside" btPolyhedralConvexShape_isInside) :pointer
  (self :pointer)
  (pt :pointer)
  (tolerance :float))

(cffi:defcfun ("_wrap_btPolyhedralConvexAabbCachingShape_getNonvirtualAabb" btPolyhedralConvexAabbCachingShape_getNonvirtualAabb) :void
  (self :pointer)
  (trans :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btPolyhedralConvexAabbCachingShape_setLocalScaling" btPolyhedralConvexAabbCachingShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexAabbCachingShape_getAabb" btPolyhedralConvexAabbCachingShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btPolyhedralConvexAabbCachingShape_recalcLocalAabb" btPolyhedralConvexAabbCachingShape_recalcLocalAabb) :void
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btPolyhedralConvexAabbCachingShape" delete_btPolyhedralConvexAabbCachingShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btConvexHullShape_3" new_btConvexHullShape_3) :pointer
  (points :pointer)
  (numPoints :int)
  (stride :int))

(cffi:defcfun ("_wrap_new_btConvexHullShape_2" new_btConvexHullShape_2) :pointer
  (points :pointer)
  (numPoints :int))

(cffi:defcfun ("_wrap_new_btConvexHullShape_1" new_btConvexHullShape_1) :pointer
  (points :pointer))

(cffi:defcfun ("_wrap_new_btConvexHullShape_0" new_btConvexHullShape_0) :pointer)

(cffi:defcfun ("_wrap_btConvexHullShape_addPoint__SWIG_0" btConvexHullShape_addPoint) :void
  (self :pointer)
  (point :pointer)
  (recalculateLocalAabb :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_addPoint__SWIG_1" btConvexHullShape_addPoint) :void
  (self :pointer)
  (point :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getUnscaledPoints__SWIG_0" btConvexHullShape_getUnscaledPoints) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getUnscaledPoints__SWIG_1" btConvexHullShape_getUnscaledPoints) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getPoints" btConvexHullShape_getPoints) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getScaledPoint" btConvexHullShape_getScaledPoint) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btConvexHullShape_getNumPoints" btConvexHullShape_getNumPoints) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_localGetSupportingVertex" btConvexHullShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_localGetSupportingVertexWithoutMargin" btConvexHullShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btConvexHullShape_project" btConvexHullShape_project) :void
  (self :pointer)
  (trans :pointer)
  (dir :pointer)
  (minProj :pointer)
  (maxProj :pointer)
  (witnesPtMin :pointer)
  (witnesPtMax :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getName" btConvexHullShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getNumVertices" btConvexHullShape_getNumVertices) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getNumEdges" btConvexHullShape_getNumEdges) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getEdge" btConvexHullShape_getEdge) :void
  (self :pointer)
  (i :int)
  (pa :pointer)
  (pb :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getVertex" btConvexHullShape_getVertex) :void
  (self :pointer)
  (i :int)
  (vtx :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getNumPlanes" btConvexHullShape_getNumPlanes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_getPlane" btConvexHullShape_getPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeSupport :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btConvexHullShape_isInside" btConvexHullShape_isInside) :pointer
  (self :pointer)
  (pt :pointer)
  (tolerance :float))

(cffi:defcfun ("_wrap_btConvexHullShape_setLocalScaling" btConvexHullShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_calculateSerializeBufferSize" btConvexHullShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConvexHullShape_serialize" btConvexHullShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btConvexHullShape" delete_btConvexHullShape) :void
  (self :pointer))

(cffi:defcstruct btConvexHullShapeData
	(m_convexInternalShapeData btConvexInternalShapeData)
	(m_unscaledPointsFloatPtr :pointer)
	(m_unscaledPointsDoublePtr :pointer)
	(m_numUnscaledPoints :int)
	(m_padding3 :pointer))

(cffi:defcfun ("_wrap_new_btSphereShape" new_btSphereShape) :pointer
  (radius :float))

(cffi:defcfun ("_wrap_btSphereShape_localGetSupportingVertex" btSphereShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btSphereShape_localGetSupportingVertexWithoutMargin" btSphereShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btSphereShape_calculateLocalInertia" btSphereShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btSphereShape_getAabb" btSphereShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btSphereShape_getRadius" btSphereShape_getRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSphereShape_setUnscaledRadius" btSphereShape_setUnscaledRadius) :void
  (self :pointer)
  (radius :float))

(cffi:defcfun ("_wrap_btSphereShape_getName" btSphereShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btSphereShape_setMargin" btSphereShape_setMargin) :void
  (self :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btSphereShape_getMargin" btSphereShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btSphereShape" delete_btSphereShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btMultiSphereShape" new_btMultiSphereShape) :pointer
  (positions :pointer)
  (radi :pointer)
  (numSpheres :int))

(cffi:defcfun ("_wrap_btMultiSphereShape_calculateLocalInertia" btMultiSphereShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_localGetSupportingVertexWithoutMargin" btMultiSphereShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btMultiSphereShape_getSphereCount" btMultiSphereShape_getSphereCount) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_getSpherePosition" btMultiSphereShape_getSpherePosition) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btMultiSphereShape_getSphereRadius" btMultiSphereShape_getSphereRadius) :float
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btMultiSphereShape_getName" btMultiSphereShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_calculateSerializeBufferSize" btMultiSphereShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btMultiSphereShape_serialize" btMultiSphereShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btMultiSphereShape" delete_btMultiSphereShape) :void
  (self :pointer))

(cffi:defcstruct btPositionAndRadius
	(m_pos btVector3FloatData)
	(m_radius :float))

(cffi:defcstruct btMultiSphereShapeData
	(m_convexInternalShapeData btConvexInternalShapeData)
	(m_localPositionArrayPtr :pointer)
	(m_localPositionArraySize :int)
	(m_padding :pointer))

(cffi:defcenum PHY_ScalarType
	:PHY_FLOAT
	:PHY_DOUBLE
	:PHY_INTEGER
	:PHY_SHORT
	:PHY_FIXEDPOINT88
	:PHY_UCHAR)

(cffi:defcfun ("_wrap_delete_btConcaveShape" delete_btConcaveShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConcaveShape_processAllTriangles" btConcaveShape_processAllTriangles) :void
  (self :pointer)
  (callback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btConcaveShape_getMargin" btConcaveShape_getMargin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConcaveShape_setMargin" btConcaveShape_setMargin) :void
  (self :pointer)
  (collisionMargin :float))

(cffi:defcfun ("_wrap_new_btStaticPlaneShape" new_btStaticPlaneShape) :pointer
  (planeNormal :pointer)
  (planeConstant :float))

(cffi:defcfun ("_wrap_delete_btStaticPlaneShape" delete_btStaticPlaneShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getAabb" btStaticPlaneShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_processAllTriangles" btStaticPlaneShape_processAllTriangles) :void
  (self :pointer)
  (callback :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_calculateLocalInertia" btStaticPlaneShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_setLocalScaling" btStaticPlaneShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getLocalScaling" btStaticPlaneShape_getLocalScaling) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getPlaneNormal" btStaticPlaneShape_getPlaneNormal) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getPlaneConstant" btStaticPlaneShape_getPlaneConstant) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_getName" btStaticPlaneShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_calculateSerializeBufferSize" btStaticPlaneShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btStaticPlaneShape_serialize" btStaticPlaneShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcstruct btStaticPlaneShapeData
	(m_collisionShapeData btCollisionShapeData)
	(m_localScaling btVector3FloatData)
	(m_planeNormal btVector3FloatData)
	(m_planeConstant :float)
	(m_pad :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getHalfExtentsWithMargin" btBoxShape_getHalfExtentsWithMargin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getHalfExtentsWithoutMargin" btBoxShape_getHalfExtentsWithoutMargin) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_localGetSupportingVertex" btBoxShape_localGetSupportingVertex) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btBoxShape_localGetSupportingVertexWithoutMargin" btBoxShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_new_btBoxShape" new_btBoxShape) :pointer
  (boxHalfExtents :pointer))

(cffi:defcfun ("_wrap_btBoxShape_setMargin" btBoxShape_setMargin) :void
  (self :pointer)
  (collisionMargin :float))

(cffi:defcfun ("_wrap_btBoxShape_setLocalScaling" btBoxShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getAabb" btBoxShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btBoxShape_calculateLocalInertia" btBoxShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getPlane" btBoxShape_getPlane) :void
  (self :pointer)
  (planeNormal :pointer)
  (planeSupport :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btBoxShape_getNumPlanes" btBoxShape_getNumPlanes) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getNumVertices" btBoxShape_getNumVertices) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getNumEdges" btBoxShape_getNumEdges) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getVertex" btBoxShape_getVertex) :void
  (self :pointer)
  (i :int)
  (vtx :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getPlaneEquation" btBoxShape_getPlaneEquation) :void
  (self :pointer)
  (plane :pointer)
  (i :int))

(cffi:defcfun ("_wrap_btBoxShape_getEdge" btBoxShape_getEdge) :void
  (self :pointer)
  (i :int)
  (pa :pointer)
  (pb :pointer))

(cffi:defcfun ("_wrap_btBoxShape_isInside" btBoxShape_isInside) :pointer
  (self :pointer)
  (pt :pointer)
  (tolerance :float))

(cffi:defcfun ("_wrap_btBoxShape_getName" btBoxShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getNumPreferredPenetrationDirections" btBoxShape_getNumPreferredPenetrationDirections) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btBoxShape_getPreferredPenetrationDirection" btBoxShape_getPreferredPenetrationDirection) :void
  (self :pointer)
  (index :int)
  (penetrationVector :pointer))

(cffi:defcfun ("_wrap_delete_btBoxShape" delete_btBoxShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCapsuleShape__SWIG_1" new_btCapsuleShape) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_btCapsuleShape_calculateLocalInertia" btCapsuleShape_calculateLocalInertia) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_localGetSupportingVertexWithoutMargin" btCapsuleShape_localGetSupportingVertexWithoutMargin) :pointer
  (self :pointer)
  (vec :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin" btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin) :void
  (self :pointer)
  (vectors :pointer)
  (supportVerticesOut :pointer)
  (numVectors :int))

(cffi:defcfun ("_wrap_btCapsuleShape_setMargin" btCapsuleShape_setMargin) :void
  (self :pointer)
  (collisionMargin :float))

(cffi:defcfun ("_wrap_btCapsuleShape_getAabb" btCapsuleShape_getAabb) :void
  (self :pointer)
  (t_arg1 :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getName" btCapsuleShape_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getUpAxis" btCapsuleShape_getUpAxis) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getRadius" btCapsuleShape_getRadius) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getHalfHeight" btCapsuleShape_getHalfHeight) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_setLocalScaling" btCapsuleShape_setLocalScaling) :void
  (self :pointer)
  (scaling :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_getAnisotropicRollingFrictionDirection" btCapsuleShape_getAnisotropicRollingFrictionDirection) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_calculateSerializeBufferSize" btCapsuleShape_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btCapsuleShape_serialize" btCapsuleShape_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btCapsuleShape" delete_btCapsuleShape) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCapsuleShapeX" new_btCapsuleShapeX) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_btCapsuleShapeX_getName" btCapsuleShapeX_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCapsuleShapeX" delete_btCapsuleShapeX) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btCapsuleShapeZ" new_btCapsuleShapeZ) :pointer
  (radius :float)
  (height :float))

(cffi:defcfun ("_wrap_btCapsuleShapeZ_getName" btCapsuleShapeZ_getName) :string
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btCapsuleShapeZ" delete_btCapsuleShapeZ) :void
  (self :pointer))

(cffi:defcstruct btCapsuleShapeData
	(m_convexInternalShapeData btConvexInternalShapeData)
	(m_upAxis :int)
	(m_padding :pointer))

(cffi:defcenum btDynamicsWorldType
	(:BT_SIMPLE_DYNAMICS_WORLD #.1)
	(:BT_DISCRETE_DYNAMICS_WORLD #.2)
	(:BT_CONTINUOUS_DYNAMICS_WORLD #.3)
	(:BT_SOFT_RIGID_DYNAMICS_WORLD #.4)
	(:BT_GPU_DYNAMICS_WORLD #.5))

(cffi:defcfun ("_wrap_delete_btDynamicsWorld" delete_btDynamicsWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_stepSimulation__SWIG_0" btDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int)
  (fixedTimeStep :float))

(cffi:defcfun ("_wrap_btDynamicsWorld_stepSimulation__SWIG_1" btDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int))

(cffi:defcfun ("_wrap_btDynamicsWorld_stepSimulation__SWIG_2" btDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btDynamicsWorld_debugDrawWorld" btDynamicsWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addConstraint__SWIG_0" btDynamicsWorld_addConstraint) :void
  (self :pointer)
  (constraint :pointer)
  (disableCollisionsBetweenLinkedBodies :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addConstraint__SWIG_1" btDynamicsWorld_addConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeConstraint" btDynamicsWorld_removeConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addAction" btDynamicsWorld_addAction) :void
  (self :pointer)
  (action :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeAction" btDynamicsWorld_removeAction) :void
  (self :pointer)
  (action :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setGravity" btDynamicsWorld_setGravity) :void
  (self :pointer)
  (gravity :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getGravity" btDynamicsWorld_getGravity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_synchronizeMotionStates" btDynamicsWorld_synchronizeMotionStates) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addRigidBody__SWIG_0" btDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addRigidBody__SWIG_1" btDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer)
  (group :short)
  (mask :short))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeRigidBody" btDynamicsWorld_removeRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setConstraintSolver" btDynamicsWorld_setConstraintSolver) :void
  (self :pointer)
  (solver :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getConstraintSolver" btDynamicsWorld_getConstraintSolver) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getNumConstraints" btDynamicsWorld_getNumConstraints) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getConstraint__SWIG_0" btDynamicsWorld_getConstraint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDynamicsWorld_getConstraint__SWIG_1" btDynamicsWorld_getConstraint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDynamicsWorld_getWorldType" btDynamicsWorld_getWorldType) btDynamicsWorldType
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_clearForces" btDynamicsWorld_clearForces) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_0" btDynamicsWorld_setInternalTickCallback) :void
  (self :pointer)
  (cb :pointer)
  (worldUserInfo :pointer)
  (isPreTick :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_1" btDynamicsWorld_setInternalTickCallback) :void
  (self :pointer)
  (cb :pointer)
  (worldUserInfo :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_2" btDynamicsWorld_setInternalTickCallback) :void
  (self :pointer)
  (cb :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_setWorldUserInfo" btDynamicsWorld_setWorldUserInfo) :void
  (self :pointer)
  (worldUserInfo :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getWorldUserInfo" btDynamicsWorld_getWorldUserInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_getSolverInfo" btDynamicsWorld_getSolverInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addVehicle" btDynamicsWorld_addVehicle) :void
  (self :pointer)
  (vehicle :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeVehicle" btDynamicsWorld_removeVehicle) :void
  (self :pointer)
  (vehicle :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_addCharacter" btDynamicsWorld_addCharacter) :void
  (self :pointer)
  (character :pointer))

(cffi:defcfun ("_wrap_btDynamicsWorld_removeCharacter" btDynamicsWorld_removeCharacter) :void
  (self :pointer)
  (character :pointer))

(cffi:defcstruct btDynamicsWorldDoubleData
	(m_solverInfo :pointer)
	(m_gravity btVector3DoubleData))

(cffi:defcstruct btDynamicsWorldFloatData
	(m_solverInfo :pointer)
	(m_gravity btVector3FloatData))

(cffi:defcfun ("_wrap_new_btDiscreteDynamicsWorld" new_btDiscreteDynamicsWorld) :pointer
  (dispatcher :pointer)
  (pairCache :pointer)
  (constraintSolver :pointer)
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btDiscreteDynamicsWorld" delete_btDiscreteDynamicsWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation3" btDiscreteDynamicsWorld_stepSimulation3) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int)
  (fixedTimeStep :float))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation2" btDiscreteDynamicsWorld_stepSimulation2) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation1" btDiscreteDynamicsWorld_stepSimulation1) :int
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_synchronizeMotionStates" btDiscreteDynamicsWorld_synchronizeMotionStates) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_synchronizeSingleMotionState" btDiscreteDynamicsWorld_synchronizeSingleMotionState) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_0" btDiscreteDynamicsWorld_addConstraint) :void
  (self :pointer)
  (constraint :pointer)
  (disableCollisionsBetweenLinkedBodies :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_1" btDiscreteDynamicsWorld_addConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeConstraint" btDiscreteDynamicsWorld_removeConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addAction" btDiscreteDynamicsWorld_addAction) :void
  (self :pointer)
  (arg1 :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeAction" btDiscreteDynamicsWorld_removeAction) :void
  (self :pointer)
  (arg1 :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0" btDiscreteDynamicsWorld_getSimulationIslandManager) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_1" btDiscreteDynamicsWorld_getSimulationIslandManager) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getCollisionWorld" btDiscreteDynamicsWorld_getCollisionWorld) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setGravity" btDiscreteDynamicsWorld_setGravity) :void
  (self :pointer)
  (gravity :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getGravity" btDiscreteDynamicsWorld_getGravity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0" btDiscreteDynamicsWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1" btDiscreteDynamicsWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2" btDiscreteDynamicsWorld_addCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addRigidBody" btDiscreteDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addRigidBodyWithMask" btDiscreteDynamicsWorld_addRigidBodyWithMask) :void
  (self :pointer)
  (body :pointer)
  (group :short)
  (mask :short))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeRigidBody" btDiscreteDynamicsWorld_removeRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeCollisionObject" btDiscreteDynamicsWorld_removeCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_debugDrawConstraint" btDiscreteDynamicsWorld_debugDrawConstraint) :void
  (self :pointer)
  (constraint :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_debugDrawWorld" btDiscreteDynamicsWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setConstraintSolver" btDiscreteDynamicsWorld_setConstraintSolver) :void
  (self :pointer)
  (solver :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraintSolver" btDiscreteDynamicsWorld_getConstraintSolver) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getNumConstraints" btDiscreteDynamicsWorld_getNumConstraints) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_0" btDiscreteDynamicsWorld_getConstraint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_1" btDiscreteDynamicsWorld_getConstraint) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getWorldType" btDiscreteDynamicsWorld_getWorldType) btDynamicsWorldType
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_clearForces" btDiscreteDynamicsWorld_clearForces) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_applyGravity" btDiscreteDynamicsWorld_applyGravity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setNumTasks" btDiscreteDynamicsWorld_setNumTasks) :void
  (self :pointer)
  (numTasks :int))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_updateVehicles" btDiscreteDynamicsWorld_updateVehicles) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addVehicle" btDiscreteDynamicsWorld_addVehicle) :void
  (self :pointer)
  (vehicle :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeVehicle" btDiscreteDynamicsWorld_removeVehicle) :void
  (self :pointer)
  (vehicle :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCharacter" btDiscreteDynamicsWorld_addCharacter) :void
  (self :pointer)
  (character :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeCharacter" btDiscreteDynamicsWorld_removeCharacter) :void
  (self :pointer)
  (character :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates" btDiscreteDynamicsWorld_setSynchronizeAllMotionStates) :void
  (self :pointer)
  (synchronizeAll :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates" btDiscreteDynamicsWorld_getSynchronizeAllMotionStates) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution" btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution) :void
  (self :pointer)
  (enable :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution" btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_serialize" btDiscreteDynamicsWorld_serialize) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation" btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation) :void
  (self :pointer)
  (latencyInterpolation :pointer))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation" btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btSimpleDynamicsWorld" new_btSimpleDynamicsWorld) :pointer
  (dispatcher :pointer)
  (pairCache :pointer)
  (constraintSolver :pointer)
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btSimpleDynamicsWorld" delete_btSimpleDynamicsWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_0" btSimpleDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int)
  (fixedTimeStep :float))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_1" btSimpleDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_2" btSimpleDynamicsWorld_stepSimulation) :int
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_setGravity" btSimpleDynamicsWorld_setGravity) :void
  (self :pointer)
  (gravity :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getGravity" btSimpleDynamicsWorld_getGravity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_0" btSimpleDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_1" btSimpleDynamicsWorld_addRigidBody) :void
  (self :pointer)
  (body :pointer)
  (group :short)
  (mask :short))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeRigidBody" btSimpleDynamicsWorld_removeRigidBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_debugDrawWorld" btSimpleDynamicsWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addAction" btSimpleDynamicsWorld_addAction) :void
  (self :pointer)
  (action :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeAction" btSimpleDynamicsWorld_removeAction) :void
  (self :pointer)
  (action :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeCollisionObject" btSimpleDynamicsWorld_removeCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_updateAabbs" btSimpleDynamicsWorld_updateAabbs) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_synchronizeMotionStates" btSimpleDynamicsWorld_synchronizeMotionStates) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_setConstraintSolver" btSimpleDynamicsWorld_setConstraintSolver) :void
  (self :pointer)
  (solver :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getConstraintSolver" btSimpleDynamicsWorld_getConstraintSolver) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getWorldType" btSimpleDynamicsWorld_getWorldType) btDynamicsWorldType
  (self :pointer))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_clearForces" btSimpleDynamicsWorld_clearForces) :void
  (self :pointer))

(cffi:defcvar ("gDeactivationTime" gDeactivationTime)
 :float)

(cffi:defcvar ("gDisableDeactivation" gDisableDeactivation)
 :pointer)

(cl:defconstant btRigidBodyDataName "btRigidBodyFloatData")

(cffi:defcenum btRigidBodyFlags
	(:BT_DISABLE_WORLD_GRAVITY #.1)
	(:BT_ENABLE_GYROPSCOPIC_FORCE #.2))

(cffi:defcfun ("_wrap_new_btRigidBody_from_btRigidBodyConstructionInfo" new_btRigidBody_from_btRigidBodyConstructionInfo) :pointer
  (constructionInfo :pointer))

(cffi:defcfun ("_wrap_new_btRigidBody_backward_compatible" new_btRigidBody_backward_compatible) :pointer
  (mass :float)
  (motionState :pointer)
  (collisionShape :pointer)
  (localInertia :pointer))

(cffi:defcfun ("_wrap_new_btRigidBody" new_btRigidBody) :pointer
  (mass :float)
  (motionState :pointer)
  (collisionShape :pointer))

(cffi:defcfun ("_wrap_delete_btRigidBody" delete_btRigidBody) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_proceedToTransform" btRigidBody_proceedToTransform) :void
  (self :pointer)
  (newTrans :pointer))

(cffi:defcfun ("_wrap_btRigidBody_upcast__SWIG_0" btRigidBody_upcast) :pointer
  (colObj :pointer))

(cffi:defcfun ("_wrap_btRigidBody_upcast__SWIG_1" btRigidBody_upcast) :pointer
  (colObj :pointer))

(cffi:defcfun ("_wrap_btRigidBody_predictIntegratedTransform" btRigidBody_predictIntegratedTransform) :void
  (self :pointer)
  (step :float)
  (predictedTransform :pointer))

(cffi:defcfun ("_wrap_btRigidBody_saveKinematicState" btRigidBody_saveKinematicState) :void
  (self :pointer)
  (step :float))

(cffi:defcfun ("_wrap_btRigidBody_applyGravity" btRigidBody_applyGravity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setGravity" btRigidBody_setGravity) :void
  (self :pointer)
  (acceleration :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getGravity" btRigidBody_getGravity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setDamping" btRigidBody_setDamping) :void
  (self :pointer)
  (lin_damping :float)
  (ang_damping :float))

(cffi:defcfun ("_wrap_btRigidBody_getLinearDamping" btRigidBody_getLinearDamping) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getAngularDamping" btRigidBody_getAngularDamping) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getLinearSleepingThreshold" btRigidBody_getLinearSleepingThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getAngularSleepingThreshold" btRigidBody_getAngularSleepingThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyDamping" btRigidBody_applyDamping) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btRigidBody_getCollisionShape__SWIG_0" btRigidBody_getCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getCollisionShape__SWIG_1" btRigidBody_getCollisionShape) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setMassProps" btRigidBody_setMassProps) :void
  (self :pointer)
  (mass :float)
  (inertia :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getLinearFactor" btRigidBody_getLinearFactor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setLinearFactor" btRigidBody_setLinearFactor) :void
  (self :pointer)
  (linearFactor :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getInvMass" btRigidBody_getInvMass) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getInvInertiaTensorWorld" btRigidBody_getInvInertiaTensorWorld) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_integrateVelocities" btRigidBody_integrateVelocities) :void
  (self :pointer)
  (step :float))

(cffi:defcfun ("_wrap_btRigidBody_setCenterOfMassTransform" btRigidBody_setCenterOfMassTransform) :void
  (self :pointer)
  (xform :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyCentralForce" btRigidBody_applyCentralForce) :void
  (self :pointer)
  (force :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getTotalForce" btRigidBody_getTotalForce) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getTotalTorque" btRigidBody_getTotalTorque) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getInvInertiaDiagLocal" btRigidBody_getInvInertiaDiagLocal) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setInvInertiaDiagLocal" btRigidBody_setInvInertiaDiagLocal) :void
  (self :pointer)
  (diagInvInertia :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setSleepingThresholds" btRigidBody_setSleepingThresholds) :void
  (self :pointer)
  (linear :float)
  (angular :float))

(cffi:defcfun ("_wrap_btRigidBody_applyTorque" btRigidBody_applyTorque) :void
  (self :pointer)
  (torque :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyForce" btRigidBody_applyForce) :void
  (self :pointer)
  (force :pointer)
  (rel_pos :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyCentralImpulse" btRigidBody_applyCentralImpulse) :void
  (self :pointer)
  (impulse :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyTorqueImpulse" btRigidBody_applyTorqueImpulse) :void
  (self :pointer)
  (torque :pointer))

(cffi:defcfun ("_wrap_btRigidBody_applyImpulse" btRigidBody_applyImpulse) :void
  (self :pointer)
  (impulse :pointer)
  (rel_pos :pointer))

(cffi:defcfun ("_wrap_btRigidBody_clearForces" btRigidBody_clearForces) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_updateInertiaTensor" btRigidBody_updateInertiaTensor) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getCenterOfMassPosition" btRigidBody_getCenterOfMassPosition) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getOrientation" btRigidBody_getOrientation) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getCenterOfMassTransform" btRigidBody_getCenterOfMassTransform) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getLinearVelocity" btRigidBody_getLinearVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getAngularVelocity" btRigidBody_getAngularVelocity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setLinearVelocity" btRigidBody_setLinearVelocity) :void
  (self :pointer)
  (lin_vel :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setAngularVelocity" btRigidBody_setAngularVelocity) :void
  (self :pointer)
  (ang_vel :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getVelocityInLocalPoint" btRigidBody_getVelocityInLocalPoint) :pointer
  (self :pointer)
  (rel_pos :pointer))

(cffi:defcfun ("_wrap_btRigidBody_translate" btRigidBody_translate) :void
  (self :pointer)
  (v :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getAabb" btRigidBody_getAabb) :void
  (self :pointer)
  (aabbMin :pointer)
  (aabbMax :pointer))

(cffi:defcfun ("_wrap_btRigidBody_computeImpulseDenominator" btRigidBody_computeImpulseDenominator) :float
  (self :pointer)
  (pos :pointer)
  (normal :pointer))

(cffi:defcfun ("_wrap_btRigidBody_computeAngularImpulseDenominator" btRigidBody_computeAngularImpulseDenominator) :float
  (self :pointer)
  (axis :pointer))

(cffi:defcfun ("_wrap_btRigidBody_updateDeactivation" btRigidBody_updateDeactivation) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btRigidBody_wantsSleeping" btRigidBody_wantsSleeping) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getBroadphaseProxy__SWIG_0" btRigidBody_getBroadphaseProxy) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getBroadphaseProxy__SWIG_1" btRigidBody_getBroadphaseProxy) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setNewBroadphaseProxy" btRigidBody_setNewBroadphaseProxy) :void
  (self :pointer)
  (broadphaseProxy :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getMotionState__SWIG_0" btRigidBody_getMotionState) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getMotionState__SWIG_1" btRigidBody_getMotionState) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setMotionState" btRigidBody_setMotionState) :void
  (self :pointer)
  (motionState :pointer))

(cffi:defcfun ("_wrap_btRigidBody_m_contactSolverType_set" btRigidBody_m_contactSolverType_set) :void
  (self :pointer)
  (m_contactSolverType :int))

(cffi:defcfun ("_wrap_btRigidBody_m_contactSolverType_get" btRigidBody_m_contactSolverType_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_m_frictionSolverType_set" btRigidBody_m_frictionSolverType_set) :void
  (self :pointer)
  (m_frictionSolverType :int))

(cffi:defcfun ("_wrap_btRigidBody_m_frictionSolverType_get" btRigidBody_m_frictionSolverType_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setAngularFactor__SWIG_0" btRigidBody_setAngularFactor) :void
  (self :pointer)
  (angFac :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setAngularFactor__SWIG_1" btRigidBody_setAngularFactor) :void
  (self :pointer)
  (angFac :float))

(cffi:defcfun ("_wrap_btRigidBody_getAngularFactor" btRigidBody_getAngularFactor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_isInWorld" btRigidBody_isInWorld) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_checkCollideWithOverride" btRigidBody_checkCollideWithOverride) :pointer
  (self :pointer)
  (co :pointer))

(cffi:defcfun ("_wrap_btRigidBody_addConstraintRef" btRigidBody_addConstraintRef) :void
  (self :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_btRigidBody_removeConstraintRef" btRigidBody_removeConstraintRef) :void
  (self :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_btRigidBody_getConstraintRef" btRigidBody_getConstraintRef) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btRigidBody_getNumConstraintRefs" btRigidBody_getNumConstraintRefs) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_setFlags" btRigidBody_setFlags) :void
  (self :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_btRigidBody_getFlags" btRigidBody_getFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_computeGyroscopicForce" btRigidBody_computeGyroscopicForce) :pointer
  (self :pointer)
  (maxGyroscopicForce :float))

(cffi:defcfun ("_wrap_btRigidBody_calculateSerializeBufferSize" btRigidBody_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBody_serialize" btRigidBody_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btRigidBody_serializeSingleObject" btRigidBody_serializeSingleObject) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcstruct btRigidBodyFloatData
	(m_collisionObjectData btCollisionObjectFloatData)
	(m_invInertiaTensorWorld btMatrix3x3FloatData)
	(m_linearVelocity btVector3FloatData)
	(m_angularVelocity btVector3FloatData)
	(m_angularFactor btVector3FloatData)
	(m_linearFactor btVector3FloatData)
	(m_gravity btVector3FloatData)
	(m_gravity_acceleration btVector3FloatData)
	(m_invInertiaLocal btVector3FloatData)
	(m_totalForce btVector3FloatData)
	(m_totalTorque btVector3FloatData)
	(m_inverseMass :float)
	(m_linearDamping :float)
	(m_angularDamping :float)
	(m_additionalDampingFactor :float)
	(m_additionalLinearDampingThresholdSqr :float)
	(m_additionalAngularDampingThresholdSqr :float)
	(m_additionalAngularDampingFactor :float)
	(m_linearSleepingThreshold :float)
	(m_angularSleepingThreshold :float)
	(m_additionalDamping :int))

(cffi:defcstruct btRigidBodyDoubleData
	(m_collisionObjectData btCollisionObjectDoubleData)
	(m_invInertiaTensorWorld btMatrix3x3DoubleData)
	(m_linearVelocity btVector3DoubleData)
	(m_angularVelocity btVector3DoubleData)
	(m_angularFactor btVector3DoubleData)
	(m_linearFactor btVector3DoubleData)
	(m_gravity btVector3DoubleData)
	(m_gravity_acceleration btVector3DoubleData)
	(m_invInertiaLocal btVector3DoubleData)
	(m_totalForce btVector3DoubleData)
	(m_totalTorque btVector3DoubleData)
	(m_inverseMass :double)
	(m_linearDamping :double)
	(m_angularDamping :double)
	(m_additionalDampingFactor :double)
	(m_additionalLinearDampingThresholdSqr :double)
	(m_additionalAngularDampingThresholdSqr :double)
	(m_additionalAngularDampingFactor :double)
	(m_linearSleepingThreshold :double)
	(m_angularSleepingThreshold :double)
	(m_additionalDamping :int)
	(m_padding :pointer))

(cffi:defcfun ("_wrap_new_btKinematicCharacterController__SWIG_0" new_btKinematicCharacterController) :pointer
  (ghostObject :pointer)
  (convexShape :pointer)
  (stepHeight :float)
  (upAxis :int))

(cffi:defcfun ("_wrap_new_btKinematicCharacterController__SWIG_1" new_btKinematicCharacterController) :pointer
  (ghostObject :pointer)
  (convexShape :pointer)
  (stepHeight :float))

(cffi:defcfun ("_wrap_delete_btKinematicCharacterController" delete_btKinematicCharacterController) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_updateAction" btKinematicCharacterController_updateAction) :void
  (self :pointer)
  (collisionWorld :pointer)
  (deltaTime :float))

(cffi:defcfun ("_wrap_btKinematicCharacterController_debugDraw" btKinematicCharacterController_debugDraw) :void
  (self :pointer)
  (debugDrawer :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setUpAxis" btKinematicCharacterController_setUpAxis) :void
  (self :pointer)
  (axis :int))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setWalkDirection" btKinematicCharacterController_setWalkDirection) :void
  (self :pointer)
  (walkDirection :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setVelocityForTimeInterval" btKinematicCharacterController_setVelocityForTimeInterval) :void
  (self :pointer)
  (velocity :pointer)
  (timeInterval :float))

(cffi:defcfun ("_wrap_btKinematicCharacterController_reset" btKinematicCharacterController_reset) :void
  (self :pointer)
  (collisionWorld :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_warp" btKinematicCharacterController_warp) :void
  (self :pointer)
  (origin :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_preStep" btKinematicCharacterController_preStep) :void
  (self :pointer)
  (collisionWorld :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_playerStep" btKinematicCharacterController_playerStep) :void
  (self :pointer)
  (collisionWorld :pointer)
  (dt :float))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setFallSpeed" btKinematicCharacterController_setFallSpeed) :void
  (self :pointer)
  (fallSpeed :float))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setJumpSpeed" btKinematicCharacterController_setJumpSpeed) :void
  (self :pointer)
  (jumpSpeed :float))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setMaxJumpHeight" btKinematicCharacterController_setMaxJumpHeight) :void
  (self :pointer)
  (maxJumpHeight :float))

(cffi:defcfun ("_wrap_btKinematicCharacterController_canJump" btKinematicCharacterController_canJump) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_jump" btKinematicCharacterController_jump) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setGravity" btKinematicCharacterController_setGravity) :void
  (self :pointer)
  (gravity :float))

(cffi:defcfun ("_wrap_btKinematicCharacterController_getGravity" btKinematicCharacterController_getGravity) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setMaxSlope" btKinematicCharacterController_setMaxSlope) :void
  (self :pointer)
  (slopeRadians :float))

(cffi:defcfun ("_wrap_btKinematicCharacterController_getMaxSlope" btKinematicCharacterController_getMaxSlope) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_getGhostObject" btKinematicCharacterController_getGhostObject) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setUseGhostSweepTest" btKinematicCharacterController_setUseGhostSweepTest) :void
  (self :pointer)
  (useGhostObjectSweepTest :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_onGround" btKinematicCharacterController_onGround) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btKinematicCharacterController_setUpInterpolate" btKinematicCharacterController_setUpInterpolate) :void
  (self :pointer)
  (value :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_mass_set" btRigidBodyConstructionInfo_m_mass_set) :void
  (self :pointer)
  (m_mass :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_mass_get" btRigidBodyConstructionInfo_m_mass_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_motionState_set" btRigidBodyConstructionInfo_m_motionState_set) :void
  (self :pointer)
  (m_motionState :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_motionState_get" btRigidBodyConstructionInfo_m_motionState_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_startWorldTransform_set" btRigidBodyConstructionInfo_m_startWorldTransform_set) :void
  (self :pointer)
  (m_startWorldTransform :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_startWorldTransform_get" btRigidBodyConstructionInfo_m_startWorldTransform_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_collisionShape_set" btRigidBodyConstructionInfo_m_collisionShape_set) :void
  (self :pointer)
  (m_collisionShape :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_collisionShape_get" btRigidBodyConstructionInfo_m_collisionShape_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_localInertia_set" btRigidBodyConstructionInfo_m_localInertia_set) :void
  (self :pointer)
  (m_localInertia :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_localInertia_get" btRigidBodyConstructionInfo_m_localInertia_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_linearDamping_set" btRigidBodyConstructionInfo_m_linearDamping_set) :void
  (self :pointer)
  (m_linearDamping :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_linearDamping_get" btRigidBodyConstructionInfo_m_linearDamping_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_angularDamping_set" btRigidBodyConstructionInfo_m_angularDamping_set) :void
  (self :pointer)
  (m_angularDamping :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_angularDamping_get" btRigidBodyConstructionInfo_m_angularDamping_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_friction_set" btRigidBodyConstructionInfo_m_friction_set) :void
  (self :pointer)
  (m_friction :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_friction_get" btRigidBodyConstructionInfo_m_friction_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_rollingFriction_set" btRigidBodyConstructionInfo_m_rollingFriction_set) :void
  (self :pointer)
  (m_rollingFriction :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_rollingFriction_get" btRigidBodyConstructionInfo_m_rollingFriction_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_restitution_set" btRigidBodyConstructionInfo_m_restitution_set) :void
  (self :pointer)
  (m_restitution :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_restitution_get" btRigidBodyConstructionInfo_m_restitution_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_linearSleepingThreshold_set" btRigidBodyConstructionInfo_m_linearSleepingThreshold_set) :void
  (self :pointer)
  (m_linearSleepingThreshold :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_linearSleepingThreshold_get" btRigidBodyConstructionInfo_m_linearSleepingThreshold_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_angularSleepingThreshold_set" btRigidBodyConstructionInfo_m_angularSleepingThreshold_set) :void
  (self :pointer)
  (m_angularSleepingThreshold :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_angularSleepingThreshold_get" btRigidBodyConstructionInfo_m_angularSleepingThreshold_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalDamping_set" btRigidBodyConstructionInfo_m_additionalDamping_set) :void
  (self :pointer)
  (m_additionalDamping :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalDamping_get" btRigidBodyConstructionInfo_m_additionalDamping_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalDampingFactor_set" btRigidBodyConstructionInfo_m_additionalDampingFactor_set) :void
  (self :pointer)
  (m_additionalDampingFactor :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalDampingFactor_get" btRigidBodyConstructionInfo_m_additionalDampingFactor_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_set" btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_set) :void
  (self :pointer)
  (m_additionalLinearDampingThresholdSqr :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_get" btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_set" btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_set) :void
  (self :pointer)
  (m_additionalAngularDampingThresholdSqr :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_get" btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_set" btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_set) :void
  (self :pointer)
  (m_additionalAngularDampingFactor :float))

(cffi:defcfun ("_wrap_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_get" btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_new_btRigidBodyConstructionInfo_4" new_btRigidBodyConstructionInfo_4) :pointer
  (mass :float)
  (motionState :pointer)
  (collisionShape :pointer)
  (localInertia :pointer))

(cffi:defcfun ("_wrap_new_btRigidBodyConstructionInfo_3" new_btRigidBodyConstructionInfo_3) :pointer
  (mass :float)
  (motionState :pointer)
  (collisionShape :pointer))

(cffi:defcfun ("_wrap_delete_btRigidBodyConstructionInfo" delete_btRigidBodyConstructionInfo) :void
  (self :pointer))

(cffi:defcenum btConstraintSolverType
	(:BT_SEQUENTIAL_IMPULSE_SOLVER #.1)
	(:BT_MLCP_SOLVER #.2))

(cffi:defcfun ("_wrap_delete_btConstraintSolver" delete_btConstraintSolver) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConstraintSolver_prepareSolve" btConstraintSolver_prepareSolve) :void
  (self :pointer)
  (arg1 :int)
  (arg2 :int))

(cffi:defcfun ("_wrap_btConstraintSolver_solveGroup" btConstraintSolver_solveGroup) :float
  (self :pointer)
  (bodies :pointer)
  (numBodies :int)
  (manifold :pointer)
  (numManifolds :int)
  (constraints :pointer)
  (numConstraints :int)
  (info :pointer)
  (debugDrawer :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btConstraintSolver_allSolved" btConstraintSolver_allSolved) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("_wrap_btConstraintSolver_reset" btConstraintSolver_reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConstraintSolver_getSolverType" btConstraintSolver_getSolverType) btConstraintSolverType
  (self :pointer))

(cl:defconstant btTypedConstraintDataName "btTypedConstraintFloatData")

(cffi:defcenum btTypedConstraintType
	(:POINT2POINT_CONSTRAINT_TYPE #.3)
	:HINGE_CONSTRAINT_TYPE
	:CONETWIST_CONSTRAINT_TYPE
	:D6_CONSTRAINT_TYPE
	:SLIDER_CONSTRAINT_TYPE
	:CONTACT_CONSTRAINT_TYPE
	:D6_SPRING_CONSTRAINT_TYPE
	:GEAR_CONSTRAINT_TYPE
	:FIXED_CONSTRAINT_TYPE
	:MAX_CONSTRAINT_TYPE)

(cffi:defcenum btConstraintParams
	(:BT_CONSTRAINT_ERP #.1)
	:BT_CONSTRAINT_STOP_ERP
	:BT_CONSTRAINT_CFM
	:BT_CONSTRAINT_STOP_CFM)

(cffi:defcstruct btJointFeedback
	(m_appliedForceBodyA :pointer)
	(m_appliedTorqueBodyA :pointer)
	(m_appliedForceBodyB :pointer)
	(m_appliedTorqueBodyB :pointer))

(cffi:defcfun ("_wrap_delete_btTypedConstraint" delete_btTypedConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getFixedBody" btTypedConstraint_getFixedBody) :pointer)

(cffi:defcfun ("_wrap_btTypedConstraint_getOverrideNumSolverIterations" btTypedConstraint_getOverrideNumSolverIterations) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setOverrideNumSolverIterations" btTypedConstraint_setOverrideNumSolverIterations) :void
  (self :pointer)
  (overideNumIterations :int))

(cffi:defcfun ("_wrap_btTypedConstraint_buildJacobian" btTypedConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setupSolverConstraint" btTypedConstraint_setupSolverConstraint) :void
  (self :pointer)
  (ca :pointer)
  (solverBodyA :int)
  (solverBodyB :int)
  (timeStep :float))

(cffi:defcfun ("_wrap_btTypedConstraint_getInfo1" btTypedConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getInfo2" btTypedConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_internalSetAppliedImpulse" btTypedConstraint_internalSetAppliedImpulse) :void
  (self :pointer)
  (appliedImpulse :float))

(cffi:defcfun ("_wrap_btTypedConstraint_internalGetAppliedImpulse" btTypedConstraint_internalGetAppliedImpulse) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getBreakingImpulseThreshold" btTypedConstraint_getBreakingImpulseThreshold) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setBreakingImpulseThreshold" btTypedConstraint_setBreakingImpulseThreshold) :void
  (self :pointer)
  (threshold :float))

(cffi:defcfun ("_wrap_btTypedConstraint_isEnabled" btTypedConstraint_isEnabled) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setEnabled" btTypedConstraint_setEnabled) :void
  (self :pointer)
  (enabled :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_solveConstraintObsolete" btTypedConstraint_solveConstraintObsolete) :void
  (self :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :float))

(cffi:defcfun ("_wrap_btTypedConstraint_getRigidBodyA__SWIG_0" btTypedConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getRigidBodyB__SWIG_0" btTypedConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getRigidBodyA__SWIG_1" btTypedConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getRigidBodyB__SWIG_1" btTypedConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getUserConstraintType" btTypedConstraint_getUserConstraintType) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setUserConstraintType" btTypedConstraint_setUserConstraintType) :void
  (self :pointer)
  (userConstraintType :int))

(cffi:defcfun ("_wrap_btTypedConstraint_setUserConstraintId" btTypedConstraint_setUserConstraintId) :void
  (self :pointer)
  (uid :int))

(cffi:defcfun ("_wrap_btTypedConstraint_getUserConstraintId" btTypedConstraint_getUserConstraintId) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setUserConstraintPtr" btTypedConstraint_setUserConstraintPtr) :void
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getUserConstraintPtr" btTypedConstraint_getUserConstraintPtr) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setJointFeedback" btTypedConstraint_setJointFeedback) :void
  (self :pointer)
  (jointFeedback :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getJointFeedback__SWIG_0" btTypedConstraint_getJointFeedback) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getJointFeedback__SWIG_1" btTypedConstraint_getJointFeedback) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getUid" btTypedConstraint_getUid) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_needsFeedback" btTypedConstraint_needsFeedback) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_enableFeedback" btTypedConstraint_enableFeedback) :void
  (self :pointer)
  (needsFeedback :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getAppliedImpulse" btTypedConstraint_getAppliedImpulse) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_getConstraintType" btTypedConstraint_getConstraintType) btTypedConstraintType
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setDbgDrawSize" btTypedConstraint_setDbgDrawSize) :void
  (self :pointer)
  (dbgDrawSize :float))

(cffi:defcfun ("_wrap_btTypedConstraint_getDbgDrawSize" btTypedConstraint_getDbgDrawSize) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_setParam__SWIG_0" btTypedConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btTypedConstraint_setParam__SWIG_1" btTypedConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btTypedConstraint_getParam__SWIG_0" btTypedConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btTypedConstraint_getParam__SWIG_1" btTypedConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btTypedConstraint_calculateSerializeBufferSize" btTypedConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btTypedConstraint_serialize" btTypedConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_btAdjustAngleToLimits" btAdjustAngleToLimits) :float
  (angleInRadians :float)
  (angleLowerLimitInRadians :float)
  (angleUpperLimitInRadians :float))

(cffi:defcstruct btTypedConstraintFloatData
	(m_rbA :pointer)
	(m_rbB :pointer)
	(m_name :string)
	(m_objectType :int)
	(m_userConstraintType :int)
	(m_userConstraintId :int)
	(m_needsFeedback :int)
	(m_appliedImpulse :float)
	(m_dbgDrawSize :float)
	(m_disableCollisionsBetweenLinkedBodies :int)
	(m_overrideNumSolverIterations :int)
	(m_breakingImpulseThreshold :float)
	(m_isEnabled :int))

(cffi:defcstruct btTypedConstraintData
	(m_rbA :pointer)
	(m_rbB :pointer)
	(m_name :string)
	(m_objectType :int)
	(m_userConstraintType :int)
	(m_userConstraintId :int)
	(m_needsFeedback :int)
	(m_appliedImpulse :float)
	(m_dbgDrawSize :float)
	(m_disableCollisionsBetweenLinkedBodies :int)
	(m_overrideNumSolverIterations :int)
	(m_breakingImpulseThreshold :float)
	(m_isEnabled :int))

(cffi:defcstruct btTypedConstraintDoubleData
	(m_rbA :pointer)
	(m_rbB :pointer)
	(m_name :string)
	(m_objectType :int)
	(m_userConstraintType :int)
	(m_userConstraintId :int)
	(m_needsFeedback :int)
	(m_appliedImpulse :double)
	(m_dbgDrawSize :double)
	(m_disableCollisionsBetweenLinkedBodies :int)
	(m_overrideNumSolverIterations :int)
	(m_breakingImpulseThreshold :double)
	(m_isEnabled :int)
	(padding :pointer))

(cffi:defcfun ("_wrap_new_btAngularLimit" new_btAngularLimit) :pointer)

(cffi:defcfun ("_wrap_btAngularLimit_btAngularLimit_set_5" btAngularLimit_btAngularLimit_set_5) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float)
  (_biasFactor :float)
  (_relaxationFactor :float))

(cffi:defcfun ("_wrap_btAngularLimit_btAngularLimit_set_4" btAngularLimit_btAngularLimit_set_4) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float)
  (_biasFactor :float))

(cffi:defcfun ("_wrap_btAngularLimit_btAngularLimit_set_3" btAngularLimit_btAngularLimit_set_3) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float))

(cffi:defcfun ("_wrap_btAngularLimit_btAngularLimit_set_2" btAngularLimit_btAngularLimit_set_2) :void
  (self :pointer)
  (low :float)
  (high :float))

(cffi:defcfun ("_wrap_btAngularLimit_test" btAngularLimit_test) :void
  (self :pointer)
  (angle :float))

(cffi:defcfun ("_wrap_btAngularLimit_getSoftness" btAngularLimit_getSoftness) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getBiasFactor" btAngularLimit_getBiasFactor) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getRelaxationFactor" btAngularLimit_getRelaxationFactor) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getCorrection" btAngularLimit_getCorrection) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getSign" btAngularLimit_getSign) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getHalfRange" btAngularLimit_getHalfRange) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_isLimit" btAngularLimit_isLimit) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_fit" btAngularLimit_fit) :void
  (self :pointer)
  (angle :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getError" btAngularLimit_getError) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getLow" btAngularLimit_getLow) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btAngularLimit_getHigh" btAngularLimit_getHigh) :float
  (self :pointer))

(cffi:defcfun ("_wrap_delete_btAngularLimit" delete_btAngularLimit) :void
  (self :pointer))

(cl:defconstant btPoint2PointConstraintDataName "btPoint2PointConstraintFloatData")

(cffi:defcstruct btConstraintSetting
	(m_tau :float)
	(m_damping :float)
	(m_impulseClamp :float))

(cffi:defcenum btPoint2PointFlags
	(:BT_P2P_FLAGS_ERP #.1)
	(:BT_P2P_FLAGS_CFM #.2))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_set" btPoint2PointConstraint_m_useSolveConstraintObsolete_set) :void
  (self :pointer)
  (m_useSolveConstraintObsolete :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_get" btPoint2PointConstraint_m_useSolveConstraintObsolete_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_m_setting_set" btPoint2PointConstraint_m_setting_set) :void
  (self :pointer)
  (m_setting :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_m_setting_get" btPoint2PointConstraint_m_setting_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btPoint2PointConstraint__SWIG_0" new_btPoint2PointConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (pivotInA :pointer)
  (pivotInB :pointer))

(cffi:defcfun ("_wrap_new_btPoint2PointConstraint__SWIG_1" new_btPoint2PointConstraint) :pointer
  (rbA :pointer)
  (pivotInA :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_buildJacobian" btPoint2PointConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getInfo1" btPoint2PointConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getInfo1NonVirtual" btPoint2PointConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getInfo2" btPoint2PointConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getInfo2NonVirtual" btPoint2PointConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (body0_trans :pointer)
  (body1_trans :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_updateRHS" btPoint2PointConstraint_updateRHS) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_setPivotA" btPoint2PointConstraint_setPivotA) :void
  (self :pointer)
  (pivotA :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_setPivotB" btPoint2PointConstraint_setPivotB) :void
  (self :pointer)
  (pivotB :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getPivotInA" btPoint2PointConstraint_getPivotInA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getPivotInB" btPoint2PointConstraint_getPivotInB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_setParam__SWIG_0" btPoint2PointConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_setParam__SWIG_1" btPoint2PointConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getParam__SWIG_0" btPoint2PointConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_getParam__SWIG_1" btPoint2PointConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_calculateSerializeBufferSize" btPoint2PointConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btPoint2PointConstraint_serialize" btPoint2PointConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btPoint2PointConstraint" delete_btPoint2PointConstraint) :void
  (self :pointer))

(cffi:defcstruct btPoint2PointConstraintFloatData
	(m_typeConstraintData btTypedConstraintData)
	(m_pivotInA btVector3FloatData)
	(m_pivotInB btVector3FloatData))

(cffi:defcstruct btPoint2PointConstraintDoubleData2
	(m_typeConstraintData btTypedConstraintDoubleData)
	(m_pivotInA btVector3DoubleData)
	(m_pivotInB btVector3DoubleData))

(cffi:defcstruct btPoint2PointConstraintDoubleData
	(m_typeConstraintData btTypedConstraintData)
	(m_pivotInA btVector3DoubleData)
	(m_pivotInB btVector3DoubleData))

(cl:defconstant _BT_USE_CENTER_LIMIT_ 1)

(cl:defconstant btHingeConstraintDataName "btHingeConstraintFloatData")

(cffi:defcenum btHingeFlags
	(:BT_HINGE_FLAGS_CFM_STOP #.1)
	(:BT_HINGE_FLAGS_ERP_STOP #.2)
	(:BT_HINGE_FLAGS_CFM_NORM #.4))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_0" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (pivotInA :pointer)
  (pivotInB :pointer)
  (axisInA :pointer)
  (axisInB :pointer)
  (useReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_1" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (pivotInA :pointer)
  (pivotInB :pointer)
  (axisInA :pointer)
  (axisInB :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_2" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (pivotInA :pointer)
  (axisInA :pointer)
  (useReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_3" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (pivotInA :pointer)
  (axisInA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_4" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (rbAFrame :pointer)
  (rbBFrame :pointer)
  (useReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_5" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (rbAFrame :pointer)
  (rbBFrame :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_6" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbAFrame :pointer)
  (useReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btHingeConstraint__SWIG_7" new_btHingeConstraint) :pointer
  (rbA :pointer)
  (rbAFrame :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_buildJacobian" btHingeConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo1" btHingeConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo1NonVirtual" btHingeConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo2" btHingeConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo2NonVirtual" btHingeConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (angVelA :pointer)
  (angVelB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo2Internal" btHingeConstraint_getInfo2Internal) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (angVelA :pointer)
  (angVelB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getInfo2InternalUsingFrameOffset" btHingeConstraint_getInfo2InternalUsingFrameOffset) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (angVelA :pointer)
  (angVelB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_updateRHS" btHingeConstraint_updateRHS) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btHingeConstraint_getRigidBodyA__SWIG_0" btHingeConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getRigidBodyB__SWIG_0" btHingeConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getRigidBodyA__SWIG_1" btHingeConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getRigidBodyB__SWIG_1" btHingeConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getFrameOffsetA" btHingeConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getFrameOffsetB" btHingeConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setFrames" btHingeConstraint_setFrames) :void
  (self :pointer)
  (frameA :pointer)
  (frameB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setAngularOnly" btHingeConstraint_setAngularOnly) :void
  (self :pointer)
  (angularOnly :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_enableAngularMotor" btHingeConstraint_enableAngularMotor) :void
  (self :pointer)
  (enableMotor :pointer)
  (targetVelocity :float)
  (maxMotorImpulse :float))

(cffi:defcfun ("_wrap_btHingeConstraint_enableMotor" btHingeConstraint_enableMotor) :void
  (self :pointer)
  (enableMotor :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setMaxMotorImpulse" btHingeConstraint_setMaxMotorImpulse) :void
  (self :pointer)
  (maxMotorImpulse :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setMotorTarget__SWIG_0" btHingeConstraint_setMotorTarget) :void
  (self :pointer)
  (qAinB :pointer)
  (dt :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setMotorTarget__SWIG_1" btHingeConstraint_setMotorTarget) :void
  (self :pointer)
  (targetAngle :float)
  (dt :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setLimit__SWIG_0" btHingeConstraint_setLimit) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float)
  (_biasFactor :float)
  (_relaxationFactor :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setLimit__SWIG_1" btHingeConstraint_setLimit) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float)
  (_biasFactor :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setLimit__SWIG_2" btHingeConstraint_setLimit) :void
  (self :pointer)
  (low :float)
  (high :float)
  (_softness :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setLimit__SWIG_3" btHingeConstraint_setLimit) :void
  (self :pointer)
  (low :float)
  (high :float))

(cffi:defcfun ("_wrap_btHingeConstraint_setAxis" btHingeConstraint_setAxis) :void
  (self :pointer)
  (axisInA :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getLowerLimit" btHingeConstraint_getLowerLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getUpperLimit" btHingeConstraint_getUpperLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getHingeAngle__SWIG_0" btHingeConstraint_getHingeAngle) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getHingeAngle__SWIG_1" btHingeConstraint_getHingeAngle) :float
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_testLimit" btHingeConstraint_testLimit) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getAFrame__SWIG_0" btHingeConstraint_getAFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getBFrame__SWIG_0" btHingeConstraint_getBFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getAFrame__SWIG_1" btHingeConstraint_getAFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getBFrame__SWIG_1" btHingeConstraint_getBFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getSolveLimit" btHingeConstraint_getSolveLimit) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getLimitSign" btHingeConstraint_getLimitSign) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getAngularOnly" btHingeConstraint_getAngularOnly) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getEnableAngularMotor" btHingeConstraint_getEnableAngularMotor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getMotorTargetVelosity" btHingeConstraint_getMotorTargetVelosity) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getMaxMotorImpulse" btHingeConstraint_getMaxMotorImpulse) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_getUseFrameOffset" btHingeConstraint_getUseFrameOffset) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setUseFrameOffset" btHingeConstraint_setUseFrameOffset) :void
  (self :pointer)
  (frameOffsetOnOff :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_setParam__SWIG_0" btHingeConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btHingeConstraint_setParam__SWIG_1" btHingeConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btHingeConstraint_getParam__SWIG_0" btHingeConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btHingeConstraint_getParam__SWIG_1" btHingeConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btHingeConstraint_calculateSerializeBufferSize" btHingeConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btHingeConstraint_serialize" btHingeConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btHingeConstraint" delete_btHingeConstraint) :void
  (self :pointer))

(cffi:defcstruct btHingeConstraintDoubleData
	(m_typeConstraintData btTypedConstraintData)
	(m_rbAFrame btTransformDoubleData)
	(m_rbBFrame btTransformDoubleData)
	(m_useReferenceFrameA :int)
	(m_angularOnly :int)
	(m_enableAngularMotor :int)
	(m_motorTargetVelocity :float)
	(m_maxMotorImpulse :float)
	(m_lowerLimit :float)
	(m_upperLimit :float)
	(m_limitSoftness :float)
	(m_biasFactor :float)
	(m_relaxationFactor :float))

(cffi:defcstruct btHingeConstraintFloatData
	(m_typeConstraintData btTypedConstraintData)
	(m_rbAFrame btTransformFloatData)
	(m_rbBFrame btTransformFloatData)
	(m_useReferenceFrameA :int)
	(m_angularOnly :int)
	(m_enableAngularMotor :int)
	(m_motorTargetVelocity :float)
	(m_maxMotorImpulse :float)
	(m_lowerLimit :float)
	(m_upperLimit :float)
	(m_limitSoftness :float)
	(m_biasFactor :float)
	(m_relaxationFactor :float))

(cffi:defcstruct btHingeConstraintDoubleData2
	(m_typeConstraintData btTypedConstraintDoubleData)
	(m_rbAFrame btTransformDoubleData)
	(m_rbBFrame btTransformDoubleData)
	(m_useReferenceFrameA :int)
	(m_angularOnly :int)
	(m_enableAngularMotor :int)
	(m_motorTargetVelocity :double)
	(m_maxMotorImpulse :double)
	(m_lowerLimit :double)
	(m_upperLimit :double)
	(m_limitSoftness :double)
	(m_biasFactor :double)
	(m_relaxationFactor :double)
	(m_padding1 :pointer))

(cl:defconstant btConeTwistConstraintDataName "btConeTwistConstraintData")

(cffi:defcenum btConeTwistFlags
	(:BT_CONETWIST_FLAGS_LIN_CFM #.1)
	(:BT_CONETWIST_FLAGS_LIN_ERP #.2)
	(:BT_CONETWIST_FLAGS_ANG_CFM #.4))

(cffi:defcfun ("_wrap_new_btConeTwistConstraint_2" new_btConeTwistConstraint_2) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (rbAFrame :pointer)
  (rbBFrame :pointer))

(cffi:defcfun ("_wrap_new_btConeTwistConstraint" new_btConeTwistConstraint) :pointer
  (rbA :pointer)
  (rbAFrame :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_buildJacobian" btConeTwistConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getInfo1" btConeTwistConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getInfo1NonVirtual" btConeTwistConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getInfo2" btConeTwistConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getInfo2NonVirtual" btConeTwistConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (invInertiaWorldA :pointer)
  (invInertiaWorldB :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_solveConstraintObsolete" btConeTwistConstraint_solveConstraintObsolete) :void
  (self :pointer)
  (bodyA :pointer)
  (bodyB :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_updateRHS" btConeTwistConstraint_updateRHS) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getRigidBodyA" btConeTwistConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getRigidBodyB" btConeTwistConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setAngularOnly" btConeTwistConstraint_setAngularOnly) :void
  (self :pointer)
  (angularOnly :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_0" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (limitIndex :int)
  (limitValue :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_1" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (_swingSpan1 :float)
  (_swingSpan2 :float)
  (_twistSpan :float)
  (_softness :float)
  (_biasFactor :float)
  (_relaxationFactor :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_2" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (_swingSpan1 :float)
  (_swingSpan2 :float)
  (_twistSpan :float)
  (_softness :float)
  (_biasFactor :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_3" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (_swingSpan1 :float)
  (_swingSpan2 :float)
  (_twistSpan :float)
  (_softness :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setLimit__SWIG_4" btConeTwistConstraint_setLimit) :void
  (self :pointer)
  (_swingSpan1 :float)
  (_swingSpan2 :float)
  (_twistSpan :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getAFrame" btConeTwistConstraint_getAFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getBFrame" btConeTwistConstraint_getBFrame) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getSolveTwistLimit" btConeTwistConstraint_getSolveTwistLimit) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getSolveSwingLimit" btConeTwistConstraint_getSolveSwingLimit) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getTwistLimitSign" btConeTwistConstraint_getTwistLimitSign) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_calcAngleInfo" btConeTwistConstraint_calcAngleInfo) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_calcAngleInfo2" btConeTwistConstraint_calcAngleInfo2) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer)
  (invInertiaWorldA :pointer)
  (invInertiaWorldB :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getSwingSpan1" btConeTwistConstraint_getSwingSpan1) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getSwingSpan2" btConeTwistConstraint_getSwingSpan2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getTwistSpan" btConeTwistConstraint_getTwistSpan) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getTwistAngle" btConeTwistConstraint_getTwistAngle) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_isPastSwingLimit" btConeTwistConstraint_isPastSwingLimit) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setDamping" btConeTwistConstraint_setDamping) :void
  (self :pointer)
  (damping :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_enableMotor" btConeTwistConstraint_enableMotor) :void
  (self :pointer)
  (b :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setMaxMotorImpulse" btConeTwistConstraint_setMaxMotorImpulse) :void
  (self :pointer)
  (maxMotorImpulse :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setMaxMotorImpulseNormalized" btConeTwistConstraint_setMaxMotorImpulseNormalized) :void
  (self :pointer)
  (maxMotorImpulse :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getFixThresh" btConeTwistConstraint_getFixThresh) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setFixThresh" btConeTwistConstraint_setFixThresh) :void
  (self :pointer)
  (fixThresh :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setMotorTarget" btConeTwistConstraint_setMotorTarget) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setMotorTargetInConstraintSpace" btConeTwistConstraint_setMotorTargetInConstraintSpace) :void
  (self :pointer)
  (q :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_GetPointForAngle" btConeTwistConstraint_GetPointForAngle) :pointer
  (self :pointer)
  (fAngleInRadians :float)
  (fLength :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setParam__SWIG_0" btConeTwistConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setParam__SWIG_1" btConeTwistConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btConeTwistConstraint_setFrames" btConeTwistConstraint_setFrames) :void
  (self :pointer)
  (frameA :pointer)
  (frameB :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getFrameOffsetA" btConeTwistConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getFrameOffsetB" btConeTwistConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getParam__SWIG_0" btConeTwistConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btConeTwistConstraint_getParam__SWIG_1" btConeTwistConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btConeTwistConstraint_calculateSerializeBufferSize" btConeTwistConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btConeTwistConstraint_serialize" btConeTwistConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btConeTwistConstraint" delete_btConeTwistConstraint) :void
  (self :pointer))

(cffi:defcstruct btConeTwistConstraintDoubleData
	(m_typeConstraintData btTypedConstraintDoubleData)
	(m_rbAFrame btTransformDoubleData)
	(m_rbBFrame btTransformDoubleData)
	(m_swingSpan1 :double)
	(m_swingSpan2 :double)
	(m_twistSpan :double)
	(m_limitSoftness :double)
	(m_biasFactor :double)
	(m_relaxationFactor :double)
	(m_damping :double))

(cffi:defcstruct btConeTwistConstraintData
	(m_typeConstraintData btTypedConstraintData)
	(m_rbAFrame btTransformFloatData)
	(m_rbBFrame btTransformFloatData)
	(m_swingSpan1 :float)
	(m_swingSpan2 :float)
	(m_twistSpan :float)
	(m_limitSoftness :float)
	(m_biasFactor :float)
	(m_relaxationFactor :float)
	(m_damping :float)
	(m_pad :pointer))

(cl:defconstant btGeneric6DofConstraintDataName "btGeneric6DofConstraintData")

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_loLimit_set" btRotationalLimitMotor_m_loLimit_set) :void
  (self :pointer)
  (m_loLimit :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_loLimit_get" btRotationalLimitMotor_m_loLimit_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_hiLimit_set" btRotationalLimitMotor_m_hiLimit_set) :void
  (self :pointer)
  (m_hiLimit :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_hiLimit_get" btRotationalLimitMotor_m_hiLimit_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_targetVelocity_set" btRotationalLimitMotor_m_targetVelocity_set) :void
  (self :pointer)
  (m_targetVelocity :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_targetVelocity_get" btRotationalLimitMotor_m_targetVelocity_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_maxMotorForce_set" btRotationalLimitMotor_m_maxMotorForce_set) :void
  (self :pointer)
  (m_maxMotorForce :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_maxMotorForce_get" btRotationalLimitMotor_m_maxMotorForce_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_maxLimitForce_set" btRotationalLimitMotor_m_maxLimitForce_set) :void
  (self :pointer)
  (m_maxLimitForce :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_maxLimitForce_get" btRotationalLimitMotor_m_maxLimitForce_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_damping_set" btRotationalLimitMotor_m_damping_set) :void
  (self :pointer)
  (m_damping :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_damping_get" btRotationalLimitMotor_m_damping_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_limitSoftness_set" btRotationalLimitMotor_m_limitSoftness_set) :void
  (self :pointer)
  (m_limitSoftness :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_limitSoftness_get" btRotationalLimitMotor_m_limitSoftness_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_normalCFM_set" btRotationalLimitMotor_m_normalCFM_set) :void
  (self :pointer)
  (m_normalCFM :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_normalCFM_get" btRotationalLimitMotor_m_normalCFM_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_stopERP_set" btRotationalLimitMotor_m_stopERP_set) :void
  (self :pointer)
  (m_stopERP :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_stopERP_get" btRotationalLimitMotor_m_stopERP_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_stopCFM_set" btRotationalLimitMotor_m_stopCFM_set) :void
  (self :pointer)
  (m_stopCFM :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_stopCFM_get" btRotationalLimitMotor_m_stopCFM_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_bounce_set" btRotationalLimitMotor_m_bounce_set) :void
  (self :pointer)
  (m_bounce :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_bounce_get" btRotationalLimitMotor_m_bounce_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_enableMotor_set" btRotationalLimitMotor_m_enableMotor_set) :void
  (self :pointer)
  (m_enableMotor :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_enableMotor_get" btRotationalLimitMotor_m_enableMotor_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentLimitError_set" btRotationalLimitMotor_m_currentLimitError_set) :void
  (self :pointer)
  (m_currentLimitError :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentLimitError_get" btRotationalLimitMotor_m_currentLimitError_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentPosition_set" btRotationalLimitMotor_m_currentPosition_set) :void
  (self :pointer)
  (m_currentPosition :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentPosition_get" btRotationalLimitMotor_m_currentPosition_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentLimit_set" btRotationalLimitMotor_m_currentLimit_set) :void
  (self :pointer)
  (m_currentLimit :int))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_currentLimit_get" btRotationalLimitMotor_m_currentLimit_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_accumulatedImpulse_set" btRotationalLimitMotor_m_accumulatedImpulse_set) :void
  (self :pointer)
  (m_accumulatedImpulse :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_m_accumulatedImpulse_get" btRotationalLimitMotor_m_accumulatedImpulse_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_new_btRotationalLimitMotor__SWIG_0" new_btRotationalLimitMotor) :pointer)

(cffi:defcfun ("_wrap_new_btRotationalLimitMotor__SWIG_1" new_btRotationalLimitMotor) :pointer
  (limot :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_isLimited" btRotationalLimitMotor_isLimited) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_needApplyTorques" btRotationalLimitMotor_needApplyTorques) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_testLimitValue" btRotationalLimitMotor_testLimitValue) :int
  (self :pointer)
  (test_value :float))

(cffi:defcfun ("_wrap_btRotationalLimitMotor_solveAngularLimits" btRotationalLimitMotor_solveAngularLimits) :float
  (self :pointer)
  (timeStep :float)
  (axis :pointer)
  (jacDiagABInv :float)
  (body0 :pointer)
  (body1 :pointer))

(cffi:defcfun ("_wrap_delete_btRotationalLimitMotor" delete_btRotationalLimitMotor) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_lowerLimit_set" btTranslationalLimitMotor_m_lowerLimit_set) :void
  (self :pointer)
  (m_lowerLimit :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_lowerLimit_get" btTranslationalLimitMotor_m_lowerLimit_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_upperLimit_set" btTranslationalLimitMotor_m_upperLimit_set) :void
  (self :pointer)
  (m_upperLimit :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_upperLimit_get" btTranslationalLimitMotor_m_upperLimit_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_accumulatedImpulse_set" btTranslationalLimitMotor_m_accumulatedImpulse_set) :void
  (self :pointer)
  (m_accumulatedImpulse :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_accumulatedImpulse_get" btTranslationalLimitMotor_m_accumulatedImpulse_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_limitSoftness_set" btTranslationalLimitMotor_m_limitSoftness_set) :void
  (self :pointer)
  (m_limitSoftness :float))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_limitSoftness_get" btTranslationalLimitMotor_m_limitSoftness_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_damping_set" btTranslationalLimitMotor_m_damping_set) :void
  (self :pointer)
  (m_damping :float))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_damping_get" btTranslationalLimitMotor_m_damping_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_restitution_set" btTranslationalLimitMotor_m_restitution_set) :void
  (self :pointer)
  (m_restitution :float))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_restitution_get" btTranslationalLimitMotor_m_restitution_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_normalCFM_set" btTranslationalLimitMotor_m_normalCFM_set) :void
  (self :pointer)
  (m_normalCFM :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_normalCFM_get" btTranslationalLimitMotor_m_normalCFM_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_stopERP_set" btTranslationalLimitMotor_m_stopERP_set) :void
  (self :pointer)
  (m_stopERP :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_stopERP_get" btTranslationalLimitMotor_m_stopERP_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_stopCFM_set" btTranslationalLimitMotor_m_stopCFM_set) :void
  (self :pointer)
  (m_stopCFM :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_stopCFM_get" btTranslationalLimitMotor_m_stopCFM_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_enableMotor_set" btTranslationalLimitMotor_m_enableMotor_set) :void
  (self :pointer)
  (m_enableMotor :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_enableMotor_get" btTranslationalLimitMotor_m_enableMotor_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_targetVelocity_set" btTranslationalLimitMotor_m_targetVelocity_set) :void
  (self :pointer)
  (m_targetVelocity :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_targetVelocity_get" btTranslationalLimitMotor_m_targetVelocity_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_maxMotorForce_set" btTranslationalLimitMotor_m_maxMotorForce_set) :void
  (self :pointer)
  (m_maxMotorForce :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_maxMotorForce_get" btTranslationalLimitMotor_m_maxMotorForce_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLimitError_set" btTranslationalLimitMotor_m_currentLimitError_set) :void
  (self :pointer)
  (m_currentLimitError :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLimitError_get" btTranslationalLimitMotor_m_currentLimitError_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLinearDiff_set" btTranslationalLimitMotor_m_currentLinearDiff_set) :void
  (self :pointer)
  (m_currentLinearDiff :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLinearDiff_get" btTranslationalLimitMotor_m_currentLinearDiff_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLimit_set" btTranslationalLimitMotor_m_currentLimit_set) :void
  (self :pointer)
  (m_currentLimit :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_m_currentLimit_get" btTranslationalLimitMotor_m_currentLimit_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btTranslationalLimitMotor__SWIG_0" new_btTranslationalLimitMotor) :pointer)

(cffi:defcfun ("_wrap_new_btTranslationalLimitMotor__SWIG_1" new_btTranslationalLimitMotor) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_isLimited" btTranslationalLimitMotor_isLimited) :pointer
  (self :pointer)
  (limitIndex :int))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_needApplyForce" btTranslationalLimitMotor_needApplyForce) :pointer
  (self :pointer)
  (limitIndex :int))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_testLimitValue" btTranslationalLimitMotor_testLimitValue) :int
  (self :pointer)
  (limitIndex :int)
  (test_value :float))

(cffi:defcfun ("_wrap_btTranslationalLimitMotor_solveLinearAxis" btTranslationalLimitMotor_solveLinearAxis) :float
  (self :pointer)
  (timeStep :float)
  (jacDiagABInv :float)
  (body1 :pointer)
  (pointInA :pointer)
  (body2 :pointer)
  (pointInB :pointer)
  (limit_index :int)
  (axis_normal_on_a :pointer)
  (anchorPos :pointer))

(cffi:defcfun ("_wrap_delete_btTranslationalLimitMotor" delete_btTranslationalLimitMotor) :void
  (self :pointer))

(cffi:defcenum bt6DofFlags
	(:BT_6DOF_FLAGS_CFM_NORM #.1)
	(:BT_6DOF_FLAGS_CFM_STOP #.2)
	(:BT_6DOF_FLAGS_ERP_STOP #.4))

(cl:defconstant BT_6DOF_FLAGS_AXIS_SHIFT 3)

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_set" btGeneric6DofConstraint_m_useSolveConstraintObsolete_set) :void
  (self :pointer)
  (m_useSolveConstraintObsolete :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_get" btGeneric6DofConstraint_m_useSolveConstraintObsolete_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_btGeneric6DofConstraint__SWIG_0" new_btGeneric6DofConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (frameInA :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btGeneric6DofConstraint__SWIG_1" new_btGeneric6DofConstraint) :pointer
  (rbB :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_0" btGeneric6DofConstraint_calculateTransforms) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_1" btGeneric6DofConstraint_calculateTransforms) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getCalculatedTransformA" btGeneric6DofConstraint_getCalculatedTransformA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getCalculatedTransformB" btGeneric6DofConstraint_getCalculatedTransformB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_0" btGeneric6DofConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_0" btGeneric6DofConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_1" btGeneric6DofConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_1" btGeneric6DofConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_buildJacobian" btGeneric6DofConstraint_buildJacobian) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getInfo1" btGeneric6DofConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getInfo1NonVirtual" btGeneric6DofConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getInfo2" btGeneric6DofConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getInfo2NonVirtual" btGeneric6DofConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (linVelA :pointer)
  (linVelB :pointer)
  (angVelA :pointer)
  (angVelB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_updateRHS" btGeneric6DofConstraint_updateRHS) :void
  (self :pointer)
  (timeStep :float))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getAxis" btGeneric6DofConstraint_getAxis) :pointer
  (self :pointer)
  (axis_index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getAngle" btGeneric6DofConstraint_getAngle) :float
  (self :pointer)
  (axis_index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getRelativePivotPosition" btGeneric6DofConstraint_getRelativePivotPosition) :float
  (self :pointer)
  (axis_index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setFrames" btGeneric6DofConstraint_setFrames) :void
  (self :pointer)
  (frameA :pointer)
  (frameB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_testAngularLimitMotor" btGeneric6DofConstraint_testAngularLimitMotor) :pointer
  (self :pointer)
  (axis_index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setLinearLowerLimit" btGeneric6DofConstraint_setLinearLowerLimit) :void
  (self :pointer)
  (linearLower :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getLinearLowerLimit" btGeneric6DofConstraint_getLinearLowerLimit) :void
  (self :pointer)
  (linearLower :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setLinearUpperLimit" btGeneric6DofConstraint_setLinearUpperLimit) :void
  (self :pointer)
  (linearUpper :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getLinearUpperLimit" btGeneric6DofConstraint_getLinearUpperLimit) :void
  (self :pointer)
  (linearUpper :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setAngularLowerLimit" btGeneric6DofConstraint_setAngularLowerLimit) :void
  (self :pointer)
  (angularLower :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getAngularLowerLimit" btGeneric6DofConstraint_getAngularLowerLimit) :void
  (self :pointer)
  (angularLower :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setAngularUpperLimit" btGeneric6DofConstraint_setAngularUpperLimit) :void
  (self :pointer)
  (angularUpper :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getAngularUpperLimit" btGeneric6DofConstraint_getAngularUpperLimit) :void
  (self :pointer)
  (angularUpper :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getRotationalLimitMotor" btGeneric6DofConstraint_getRotationalLimitMotor) :pointer
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getTranslationalLimitMotor" btGeneric6DofConstraint_getTranslationalLimitMotor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setLimit" btGeneric6DofConstraint_setLimit) :void
  (self :pointer)
  (axis :int)
  (lo :float)
  (hi :float))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_isLimited" btGeneric6DofConstraint_isLimited) :pointer
  (self :pointer)
  (limitIndex :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_calcAnchorPos" btGeneric6DofConstraint_calcAnchorPos) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0" btGeneric6DofConstraint_get_limit_motor_info2) :int
  (self :pointer)
  (limot :pointer)
  (transA :pointer)
  (transB :pointer)
  (linVelA :pointer)
  (linVelB :pointer)
  (angVelA :pointer)
  (angVelB :pointer)
  (info :pointer)
  (row :int)
  (ax1 :pointer)
  (rotational :int)
  (rotAllowed :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1" btGeneric6DofConstraint_get_limit_motor_info2) :int
  (self :pointer)
  (limot :pointer)
  (transA :pointer)
  (transB :pointer)
  (linVelA :pointer)
  (linVelB :pointer)
  (angVelA :pointer)
  (angVelB :pointer)
  (info :pointer)
  (row :int)
  (ax1 :pointer)
  (rotational :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getUseFrameOffset" btGeneric6DofConstraint_getUseFrameOffset) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setUseFrameOffset" btGeneric6DofConstraint_setUseFrameOffset) :void
  (self :pointer)
  (frameOffsetOnOff :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setParam__SWIG_0" btGeneric6DofConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setParam__SWIG_1" btGeneric6DofConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getParam__SWIG_0" btGeneric6DofConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_getParam__SWIG_1" btGeneric6DofConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_setAxis" btGeneric6DofConstraint_setAxis) :void
  (self :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_calculateSerializeBufferSize" btGeneric6DofConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofConstraint_serialize" btGeneric6DofConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btGeneric6DofConstraint" delete_btGeneric6DofConstraint) :void
  (self :pointer))

(cffi:defcstruct btGeneric6DofConstraintData
	(m_typeConstraintData btTypedConstraintData)
	(m_rbAFrame btTransformFloatData)
	(m_rbBFrame btTransformFloatData)
	(m_linearUpperLimit btVector3FloatData)
	(m_linearLowerLimit btVector3FloatData)
	(m_angularUpperLimit btVector3FloatData)
	(m_angularLowerLimit btVector3FloatData)
	(m_useLinearReferenceFrameA :int)
	(m_useOffsetForConstraintFrame :int))

(cffi:defcstruct btGeneric6DofConstraintDoubleData2
	(m_typeConstraintData btTypedConstraintDoubleData)
	(m_rbAFrame btTransformDoubleData)
	(m_rbBFrame btTransformDoubleData)
	(m_linearUpperLimit btVector3DoubleData)
	(m_linearLowerLimit btVector3DoubleData)
	(m_angularUpperLimit btVector3DoubleData)
	(m_angularLowerLimit btVector3DoubleData)
	(m_useLinearReferenceFrameA :int)
	(m_useOffsetForConstraintFrame :int))

(cl:defconstant btSliderConstraintDataName "btSliderConstraintData")

(cffi:defcenum btSliderFlags
	(:BT_SLIDER_FLAGS_CFM_DIRLIN #.(cl:ash 1 0))
	(:BT_SLIDER_FLAGS_ERP_DIRLIN #.(cl:ash 1 1))
	(:BT_SLIDER_FLAGS_CFM_DIRANG #.(cl:ash 1 2))
	(:BT_SLIDER_FLAGS_ERP_DIRANG #.(cl:ash 1 3))
	(:BT_SLIDER_FLAGS_CFM_ORTLIN #.(cl:ash 1 4))
	(:BT_SLIDER_FLAGS_ERP_ORTLIN #.(cl:ash 1 5))
	(:BT_SLIDER_FLAGS_CFM_ORTANG #.(cl:ash 1 6))
	(:BT_SLIDER_FLAGS_ERP_ORTANG #.(cl:ash 1 7))
	(:BT_SLIDER_FLAGS_CFM_LIMLIN #.(cl:ash 1 8))
	(:BT_SLIDER_FLAGS_ERP_LIMLIN #.(cl:ash 1 9))
	(:BT_SLIDER_FLAGS_CFM_LIMANG #.(cl:ash 1 10))
	(:BT_SLIDER_FLAGS_ERP_LIMANG #.(cl:ash 1 11)))

(cffi:defcfun ("_wrap_new_btSliderConstraint__SWIG_0" new_btSliderConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (frameInA :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btSliderConstraint__SWIG_1" new_btSliderConstraint) :pointer
  (rbB :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getInfo1" btSliderConstraint_getInfo1) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getInfo1NonVirtual" btSliderConstraint_getInfo1NonVirtual) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getInfo2" btSliderConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getInfo2NonVirtual" btSliderConstraint_getInfo2NonVirtual) :void
  (self :pointer)
  (info :pointer)
  (transA :pointer)
  (transB :pointer)
  (linVelA :pointer)
  (linVelB :pointer)
  (rbAinvMass :float)
  (rbBinvMass :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getRigidBodyA" btSliderConstraint_getRigidBodyA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRigidBodyB" btSliderConstraint_getRigidBodyB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getCalculatedTransformA" btSliderConstraint_getCalculatedTransformA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getCalculatedTransformB" btSliderConstraint_getCalculatedTransformB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getFrameOffsetA__SWIG_0" btSliderConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getFrameOffsetB__SWIG_0" btSliderConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getFrameOffsetA__SWIG_1" btSliderConstraint_getFrameOffsetA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getFrameOffsetB__SWIG_1" btSliderConstraint_getFrameOffsetB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getLowerLinLimit" btSliderConstraint_getLowerLinLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setLowerLinLimit" btSliderConstraint_setLowerLinLimit) :void
  (self :pointer)
  (lowerLimit :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getUpperLinLimit" btSliderConstraint_getUpperLinLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setUpperLinLimit" btSliderConstraint_setUpperLinLimit) :void
  (self :pointer)
  (upperLimit :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getLowerAngLimit" btSliderConstraint_getLowerAngLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setLowerAngLimit" btSliderConstraint_setLowerAngLimit) :void
  (self :pointer)
  (lowerLimit :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getUpperAngLimit" btSliderConstraint_getUpperAngLimit) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setUpperAngLimit" btSliderConstraint_setUpperAngLimit) :void
  (self :pointer)
  (upperLimit :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getUseLinearReferenceFrameA" btSliderConstraint_getUseLinearReferenceFrameA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessDirLin" btSliderConstraint_getSoftnessDirLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionDirLin" btSliderConstraint_getRestitutionDirLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingDirLin" btSliderConstraint_getDampingDirLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessDirAng" btSliderConstraint_getSoftnessDirAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionDirAng" btSliderConstraint_getRestitutionDirAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingDirAng" btSliderConstraint_getDampingDirAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessLimLin" btSliderConstraint_getSoftnessLimLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionLimLin" btSliderConstraint_getRestitutionLimLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingLimLin" btSliderConstraint_getDampingLimLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessLimAng" btSliderConstraint_getSoftnessLimAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionLimAng" btSliderConstraint_getRestitutionLimAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingLimAng" btSliderConstraint_getDampingLimAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessOrthoLin" btSliderConstraint_getSoftnessOrthoLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionOrthoLin" btSliderConstraint_getRestitutionOrthoLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingOrthoLin" btSliderConstraint_getDampingOrthoLin) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSoftnessOrthoAng" btSliderConstraint_getSoftnessOrthoAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getRestitutionOrthoAng" btSliderConstraint_getRestitutionOrthoAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getDampingOrthoAng" btSliderConstraint_getDampingOrthoAng) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessDirLin" btSliderConstraint_setSoftnessDirLin) :void
  (self :pointer)
  (softnessDirLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionDirLin" btSliderConstraint_setRestitutionDirLin) :void
  (self :pointer)
  (restitutionDirLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingDirLin" btSliderConstraint_setDampingDirLin) :void
  (self :pointer)
  (dampingDirLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessDirAng" btSliderConstraint_setSoftnessDirAng) :void
  (self :pointer)
  (softnessDirAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionDirAng" btSliderConstraint_setRestitutionDirAng) :void
  (self :pointer)
  (restitutionDirAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingDirAng" btSliderConstraint_setDampingDirAng) :void
  (self :pointer)
  (dampingDirAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessLimLin" btSliderConstraint_setSoftnessLimLin) :void
  (self :pointer)
  (softnessLimLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionLimLin" btSliderConstraint_setRestitutionLimLin) :void
  (self :pointer)
  (restitutionLimLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingLimLin" btSliderConstraint_setDampingLimLin) :void
  (self :pointer)
  (dampingLimLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessLimAng" btSliderConstraint_setSoftnessLimAng) :void
  (self :pointer)
  (softnessLimAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionLimAng" btSliderConstraint_setRestitutionLimAng) :void
  (self :pointer)
  (restitutionLimAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingLimAng" btSliderConstraint_setDampingLimAng) :void
  (self :pointer)
  (dampingLimAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessOrthoLin" btSliderConstraint_setSoftnessOrthoLin) :void
  (self :pointer)
  (softnessOrthoLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionOrthoLin" btSliderConstraint_setRestitutionOrthoLin) :void
  (self :pointer)
  (restitutionOrthoLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingOrthoLin" btSliderConstraint_setDampingOrthoLin) :void
  (self :pointer)
  (dampingOrthoLin :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setSoftnessOrthoAng" btSliderConstraint_setSoftnessOrthoAng) :void
  (self :pointer)
  (softnessOrthoAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setRestitutionOrthoAng" btSliderConstraint_setRestitutionOrthoAng) :void
  (self :pointer)
  (restitutionOrthoAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setDampingOrthoAng" btSliderConstraint_setDampingOrthoAng) :void
  (self :pointer)
  (dampingOrthoAng :float))

(cffi:defcfun ("_wrap_btSliderConstraint_setPoweredLinMotor" btSliderConstraint_setPoweredLinMotor) :void
  (self :pointer)
  (onOff :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getPoweredLinMotor" btSliderConstraint_getPoweredLinMotor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setTargetLinMotorVelocity" btSliderConstraint_setTargetLinMotorVelocity) :void
  (self :pointer)
  (targetLinMotorVelocity :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getTargetLinMotorVelocity" btSliderConstraint_getTargetLinMotorVelocity) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setMaxLinMotorForce" btSliderConstraint_setMaxLinMotorForce) :void
  (self :pointer)
  (maxLinMotorForce :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getMaxLinMotorForce" btSliderConstraint_getMaxLinMotorForce) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setPoweredAngMotor" btSliderConstraint_setPoweredAngMotor) :void
  (self :pointer)
  (onOff :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getPoweredAngMotor" btSliderConstraint_getPoweredAngMotor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setTargetAngMotorVelocity" btSliderConstraint_setTargetAngMotorVelocity) :void
  (self :pointer)
  (targetAngMotorVelocity :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getTargetAngMotorVelocity" btSliderConstraint_getTargetAngMotorVelocity) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setMaxAngMotorForce" btSliderConstraint_setMaxAngMotorForce) :void
  (self :pointer)
  (maxAngMotorForce :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getMaxAngMotorForce" btSliderConstraint_getMaxAngMotorForce) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getLinearPos" btSliderConstraint_getLinearPos) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getAngularPos" btSliderConstraint_getAngularPos) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSolveLinLimit" btSliderConstraint_getSolveLinLimit) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getLinDepth" btSliderConstraint_getLinDepth) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getSolveAngLimit" btSliderConstraint_getSolveAngLimit) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getAngDepth" btSliderConstraint_getAngDepth) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_calculateTransforms" btSliderConstraint_calculateTransforms) :void
  (self :pointer)
  (transA :pointer)
  (transB :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_testLinLimits" btSliderConstraint_testLinLimits) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_testAngLimits" btSliderConstraint_testAngLimits) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getAncorInA" btSliderConstraint_getAncorInA) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getAncorInB" btSliderConstraint_getAncorInB) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_getUseFrameOffset" btSliderConstraint_getUseFrameOffset) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setUseFrameOffset" btSliderConstraint_setUseFrameOffset) :void
  (self :pointer)
  (frameOffsetOnOff :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setFrames" btSliderConstraint_setFrames) :void
  (self :pointer)
  (frameA :pointer)
  (frameB :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_setParam__SWIG_0" btSliderConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float)
  (axis :int))

(cffi:defcfun ("_wrap_btSliderConstraint_setParam__SWIG_1" btSliderConstraint_setParam) :void
  (self :pointer)
  (num :int)
  (value :float))

(cffi:defcfun ("_wrap_btSliderConstraint_getParam__SWIG_0" btSliderConstraint_getParam) :float
  (self :pointer)
  (num :int)
  (axis :int))

(cffi:defcfun ("_wrap_btSliderConstraint_getParam__SWIG_1" btSliderConstraint_getParam) :float
  (self :pointer)
  (num :int))

(cffi:defcfun ("_wrap_btSliderConstraint_calculateSerializeBufferSize" btSliderConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSliderConstraint_serialize" btSliderConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btSliderConstraint" delete_btSliderConstraint) :void
  (self :pointer))

(cffi:defcstruct btSliderConstraintData
	(m_typeConstraintData btTypedConstraintData)
	(m_rbAFrame btTransformFloatData)
	(m_rbBFrame btTransformFloatData)
	(m_linearUpperLimit :float)
	(m_linearLowerLimit :float)
	(m_angularUpperLimit :float)
	(m_angularLowerLimit :float)
	(m_useLinearReferenceFrameA :int)
	(m_useOffsetForConstraintFrame :int))

(cffi:defcstruct btSliderConstraintDoubleData
	(m_typeConstraintData btTypedConstraintDoubleData)
	(m_rbAFrame btTransformDoubleData)
	(m_rbBFrame btTransformDoubleData)
	(m_linearUpperLimit :double)
	(m_linearLowerLimit :double)
	(m_angularUpperLimit :double)
	(m_angularLowerLimit :double)
	(m_useLinearReferenceFrameA :int)
	(m_useOffsetForConstraintFrame :int))

(cl:defconstant btGeneric6DofSpringConstraintDataName "btGeneric6DofSpringConstraintData")

(cffi:defcfun ("_wrap_new_btGeneric6DofSpringConstraint__SWIG_0" new_btGeneric6DofSpringConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (frameInA :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameA :pointer))

(cffi:defcfun ("_wrap_new_btGeneric6DofSpringConstraint__SWIG_1" new_btGeneric6DofSpringConstraint) :pointer
  (rbB :pointer)
  (frameInB :pointer)
  (useLinearReferenceFrameB :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_enableSpring" btGeneric6DofSpringConstraint_enableSpring) :void
  (self :pointer)
  (index :int)
  (onOff :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setStiffness" btGeneric6DofSpringConstraint_setStiffness) :void
  (self :pointer)
  (index :int)
  (stiffness :float))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setDamping" btGeneric6DofSpringConstraint_setDamping) :void
  (self :pointer)
  (index :int)
  (damping :float))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0" btGeneric6DofSpringConstraint_setEquilibriumPoint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1" btGeneric6DofSpringConstraint_setEquilibriumPoint) :void
  (self :pointer)
  (index :int))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2" btGeneric6DofSpringConstraint_setEquilibriumPoint) :void
  (self :pointer)
  (index :int)
  (val :float))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_setAxis" btGeneric6DofSpringConstraint_setAxis) :void
  (self :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_getInfo2" btGeneric6DofSpringConstraint_getInfo2) :void
  (self :pointer)
  (info :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_calculateSerializeBufferSize" btGeneric6DofSpringConstraint_calculateSerializeBufferSize) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btGeneric6DofSpringConstraint_serialize" btGeneric6DofSpringConstraint_serialize) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_delete_btGeneric6DofSpringConstraint" delete_btGeneric6DofSpringConstraint) :void
  (self :pointer))

(cffi:defcstruct btGeneric6DofSpringConstraintData
	(m_6dofData btGeneric6DofConstraintData)
	(m_springEnabled :pointer)
	(m_equilibriumPoint :pointer)
	(m_springStiffness :pointer)
	(m_springDamping :pointer))

(cffi:defcstruct btGeneric6DofSpringConstraintDoubleData2
	(m_6dofData btGeneric6DofConstraintDoubleData2)
	(m_springEnabled :pointer)
	(m_equilibriumPoint :pointer)
	(m_springStiffness :pointer)
	(m_springDamping :pointer))

(cffi:defcfun ("_wrap_new_btUniversalConstraint" new_btUniversalConstraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (anchor :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAnchor" btUniversalConstraint_getAnchor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAnchor2" btUniversalConstraint_getAnchor2) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAxis1" btUniversalConstraint_getAxis1) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAxis2" btUniversalConstraint_getAxis2) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAngle1" btUniversalConstraint_getAngle1) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_getAngle2" btUniversalConstraint_getAngle2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btUniversalConstraint_setUpperLimit" btUniversalConstraint_setUpperLimit) :void
  (self :pointer)
  (ang1max :float)
  (ang2max :float))

(cffi:defcfun ("_wrap_btUniversalConstraint_setLowerLimit" btUniversalConstraint_setLowerLimit) :void
  (self :pointer)
  (ang1min :float)
  (ang2min :float))

(cffi:defcfun ("_wrap_btUniversalConstraint_setAxis" btUniversalConstraint_setAxis) :void
  (self :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_delete_btUniversalConstraint" delete_btUniversalConstraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btHinge2Constraint" new_btHinge2Constraint) :pointer
  (rbA :pointer)
  (rbB :pointer)
  (anchor :pointer)
  (axis1 :pointer)
  (axis2 :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAnchor" btHinge2Constraint_getAnchor) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAnchor2" btHinge2Constraint_getAnchor2) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAxis1" btHinge2Constraint_getAxis1) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAxis2" btHinge2Constraint_getAxis2) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAngle1" btHinge2Constraint_getAngle1) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_getAngle2" btHinge2Constraint_getAngle2) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btHinge2Constraint_setUpperLimit" btHinge2Constraint_setUpperLimit) :void
  (self :pointer)
  (ang1max :float))

(cffi:defcfun ("_wrap_btHinge2Constraint_setLowerLimit" btHinge2Constraint_setLowerLimit) :void
  (self :pointer)
  (ang1min :float))

(cffi:defcfun ("_wrap_delete_btHinge2Constraint" delete_btHinge2Constraint) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_btSequentialImpulseConstraintSolver" new_btSequentialImpulseConstraintSolver) :pointer)

(cffi:defcfun ("_wrap_delete_btSequentialImpulseConstraintSolver" delete_btSequentialImpulseConstraintSolver) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_solveGroup" btSequentialImpulseConstraintSolver_solveGroup) :float
  (self :pointer)
  (bodies :pointer)
  (numBodies :int)
  (manifold :pointer)
  (numManifolds :int)
  (constraints :pointer)
  (numConstraints :int)
  (info :pointer)
  (debugDrawer :pointer)
  (dispatcher :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_reset" btSequentialImpulseConstraintSolver_reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_btRand2" btSequentialImpulseConstraintSolver_btRand2) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_btRandInt2" btSequentialImpulseConstraintSolver_btRandInt2) :int
  (self :pointer)
  (n :int))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_setRandSeed" btSequentialImpulseConstraintSolver_setRandSeed) :void
  (self :pointer)
  (seed :unsigned-long))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_getRandSeed" btSequentialImpulseConstraintSolver_getRandSeed) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_btSequentialImpulseConstraintSolver_getSolverType" btSequentialImpulseConstraintSolver_getSolverType) btConstraintSolverType
  (self :pointer))

(cffi:defcfun ("_wrap_new_btSoftRigidDynamicsWorld__SWIG_0" new_btSoftRigidDynamicsWorld) :pointer
  (dispatcher :pointer)
  (pairCache :pointer)
  (constraintSolver :pointer)
  (collisionConfiguration :pointer)
  (softBodySolver :pointer))

(cffi:defcfun ("_wrap_new_btSoftRigidDynamicsWorld__SWIG_1" new_btSoftRigidDynamicsWorld) :pointer
  (dispatcher :pointer)
  (pairCache :pointer)
  (constraintSolver :pointer)
  (collisionConfiguration :pointer))

(cffi:defcfun ("_wrap_delete_btSoftRigidDynamicsWorld" delete_btSoftRigidDynamicsWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_debugDrawWorld" btSoftRigidDynamicsWorld_debugDrawWorld) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_0" btSoftRigidDynamicsWorld_addSoftBody) :void
  (self :pointer)
  (body :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_1" btSoftRigidDynamicsWorld_addSoftBody) :void
  (self :pointer)
  (body :pointer)
  (collisionFilterGroup :short))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_2" btSoftRigidDynamicsWorld_addSoftBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_removeSoftBody" btSoftRigidDynamicsWorld_removeSoftBody) :void
  (self :pointer)
  (body :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_removeCollisionObject" btSoftRigidDynamicsWorld_removeCollisionObject) :void
  (self :pointer)
  (collisionObject :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_getDrawFlags" btSoftRigidDynamicsWorld_getDrawFlags) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_setDrawFlags" btSoftRigidDynamicsWorld_setDrawFlags) :void
  (self :pointer)
  (f :int))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_getWorldInfo__SWIG_0" btSoftRigidDynamicsWorld_getWorldInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_getWorldInfo__SWIG_1" btSoftRigidDynamicsWorld_getWorldInfo) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_getWorldType" btSoftRigidDynamicsWorld_getWorldType) btDynamicsWorldType
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_getSoftBodyArray__SWIG_0" btSoftRigidDynamicsWorld_getSoftBodyArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_getSoftBodyArray__SWIG_1" btSoftRigidDynamicsWorld_getSoftBodyArray) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_rayTest" btSoftRigidDynamicsWorld_rayTest) :void
  (self :pointer)
  (rayFromWorld :pointer)
  (rayToWorld :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_rayTestSingle" btSoftRigidDynamicsWorld_rayTestSingle) :void
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObject :pointer)
  (collisionShape :pointer)
  (colObjWorldTransform :pointer)
  (resultCallback :pointer))

(cffi:defcfun ("_wrap_btSoftRigidDynamicsWorld_serialize" btSoftRigidDynamicsWorld_serialize) :void
  (self :pointer)
  (serializer :pointer))

(cffi:defcfun ("_wrap_new_btSoftBodyRigidBodyCollisionConfiguration__SWIG_0" new_btSoftBodyRigidBodyCollisionConfiguration) :pointer
  (constructionInfo :pointer))

(cffi:defcfun ("_wrap_new_btSoftBodyRigidBodyCollisionConfiguration__SWIG_1" new_btSoftBodyRigidBodyCollisionConfiguration) :pointer)

(cffi:defcfun ("_wrap_delete_btSoftBodyRigidBodyCollisionConfiguration" delete_btSoftBodyRigidBodyCollisionConfiguration) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSoftBodyRigidBodyCollisionConfiguration_getCollisionAlgorithmCreateFunc" btSoftBodyRigidBodyCollisionConfiguration_getCollisionAlgorithmCreateFunc) :pointer
  (self :pointer)
  (proxyType0 :int)
  (proxyType1 :int))

(cffi:defcfun ("_wrap_btSoftBodyGetNodePosition" btSoftBodyGetNodePosition) :pointer
  (body :pointer)
  (n :int))

(cffi:defcfun ("_wrap_btSoftBodySetNodePosition" btSoftBodySetNodePosition) :void
  (body :pointer)
  (n :int)
  (pos :pointer))

(cffi:defcfun ("_wrap_btSoftBodySetStretch" btSoftBodySetStretch) :void
  (body :pointer)
  (val :float))

(cffi:defcfun ("_wrap_btSoftBodySetShear" btSoftBodySetShear) :void
  (body :pointer)
  (val :float))

(cffi:defcfun ("_wrap_btSparseSdf3_cells_set" btSparseSdf3_cells_set) :void
  (self :pointer)
  (cells :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_cells_get" btSparseSdf3_cells_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_voxelsz_set" btSparseSdf3_voxelsz_set) :void
  (self :pointer)
  (voxelsz :float))

(cffi:defcfun ("_wrap_btSparseSdf3_voxelsz_get" btSparseSdf3_voxelsz_get) :float
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_puid_set" btSparseSdf3_puid_set) :void
  (self :pointer)
  (puid :int))

(cffi:defcfun ("_wrap_btSparseSdf3_puid_get" btSparseSdf3_puid_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_ncells_set" btSparseSdf3_ncells_set) :void
  (self :pointer)
  (ncells :int))

(cffi:defcfun ("_wrap_btSparseSdf3_ncells_get" btSparseSdf3_ncells_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_m_clampCells_set" btSparseSdf3_m_clampCells_set) :void
  (self :pointer)
  (m_clampCells :int))

(cffi:defcfun ("_wrap_btSparseSdf3_m_clampCells_get" btSparseSdf3_m_clampCells_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_nprobes_set" btSparseSdf3_nprobes_set) :void
  (self :pointer)
  (nprobes :int))

(cffi:defcfun ("_wrap_btSparseSdf3_nprobes_get" btSparseSdf3_nprobes_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_nqueries_set" btSparseSdf3_nqueries_set) :void
  (self :pointer)
  (nqueries :int))

(cffi:defcfun ("_wrap_btSparseSdf3_nqueries_get" btSparseSdf3_nqueries_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_Initialize__SWIG_0" btSparseSdf3_Initialize) :void
  (self :pointer)
  (hashsize :int)
  (clampCells :int))

(cffi:defcfun ("_wrap_btSparseSdf3_Initialize__SWIG_1" btSparseSdf3_Initialize) :void
  (self :pointer)
  (hashsize :int))

(cffi:defcfun ("_wrap_btSparseSdf3_Initialize__SWIG_2" btSparseSdf3_Initialize) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_Reset" btSparseSdf3_Reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_GarbageCollect__SWIG_0" btSparseSdf3_GarbageCollect) :void
  (self :pointer)
  (lifetime :int))

(cffi:defcfun ("_wrap_btSparseSdf3_GarbageCollect__SWIG_1" btSparseSdf3_GarbageCollect) :void
  (self :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_RemoveReferences" btSparseSdf3_RemoveReferences) :int
  (self :pointer)
  (pcs :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_Evaluate" btSparseSdf3_Evaluate) :float
  (self :pointer)
  (x :pointer)
  (shape :pointer)
  (normal :pointer)
  (margin :float))

(cffi:defcfun ("_wrap_btSparseSdf3_BuildCell" btSparseSdf3_BuildCell) :void
  (self :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_DistanceToShape" btSparseSdf3_DistanceToShape) :float
  (x :pointer)
  (shape :pointer))

(cffi:defcfun ("_wrap_btSparseSdf3_Decompose" btSparseSdf3_Decompose) :pointer
  (x :float))

(cffi:defcfun ("_wrap_btSparseSdf3_Lerp" btSparseSdf3_Lerp) :float
  (a :float)
  (b :float)
  (t_arg2 :float))

(cffi:defcfun ("_wrap_btSparseSdf3_Hash" btSparseSdf3_Hash) :unsigned-int
  (x :int)
  (y :int)
  (z :int)
  (shape :pointer))

(cffi:defcfun ("_wrap_new_btSparseSdf3" new_btSparseSdf3) :pointer)

(cffi:defcfun ("_wrap_delete_btSparseSdf3" delete_btSparseSdf3) :void
  (self :pointer))

(cffi:defcstruct floatArray)

(cffi:defcstruct btVector3Array)


